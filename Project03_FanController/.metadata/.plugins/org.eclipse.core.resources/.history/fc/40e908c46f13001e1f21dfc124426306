/*
 * Timers.c
 *
 * Created: 10/7/2021 11:39:21 AM
 *  Author: Marco
 */ 

#include "Timers.h"
#include "..\MCAL\gpio.h"

/******************************************************************************
*                               GLOBAL & EXTERN VARIABLES                     *
*******************************************************************************/
PTR_VoidFuncVoid_t CALLBACK_OVF;
PTR_VoidFuncVoid_t CALLBACK_CM;
uint8_t u8_TOVNumber;
STIMER0_CONFIG* TIMER0_Configurations;

/******************************************************************************
*								 APIS IMPLEMENTATION			              *
*******************************************************************************/
E_STATUS_t TIMER0_Init(STIMER0_CONFIG* configuartion)
{
	E_STATUS_t u8_Retval = E_NOK;
	if (NULL_PTR == configuartion)
	{
		u8_Retval = E_NOK;
	}
	else
	{
		TIMER0_Configurations = configuartion;
		if ((NORMAL == TIMER0_Configurations->mode) || (CTC == TIMER0_Configurations->mode))
		{
			TCCR0 |= TIMER0_Configurations->mode;
			u8_Retval = E_OK;
		}
		else
		{
			u8_Retval = E_NOK;
		}
		if ((NO_CLK_SRC <= TIMER0_Configurations->clk) && (EXT_CLK_RISING >= TIMER0_Configurations->clk))
		{
			TCCR0 |= TIMER0_Configurations->clk;
			u8_Retval = E_OK;
		}
		else
		{
			u8_Retval = E_NOK;
		}
		if ((OCIE_DISABLE == TIMER0_Configurations->ocmInterrupt) || (OCIE_ENABLE == TIMER0_Configurations->ocmInterrupt))
		{
			TIMSK |= TIMER0_Configurations->ocmInterrupt;
			u8_Retval = E_OK;
		}
		else
		{
			u8_Retval = E_NOK;
		}
		if ((TOIE_DISABLE == TIMER0_Configurations->ovfInterrupt) || (TOIE_ENABLE == TIMER0_Configurations->ovfInterrupt))
		{
			TIMSK |= TIMER0_Configurations->ovfInterrupt;
			u8_Retval = E_OK;
		}
		else
		{
			u8_Retval = E_NOK;
		}
		if ((normal == TIMER0_Configurations->com) || (reserved == TIMER0_Configurations->com) \
			|| (non_inverting == TIMER0_Configurations->com) || (non_inverting == TIMER0_Configurations->com))
		{
			TCCR0|=TIMER0_Configurations->com;
			u8_Retval = E_OK;
		}
		else
		{
			u8_Retval = E_NOK;
		}
	}
	
	return u8_Retval;
}

E_STATUS_t TIMER0_Stop()
{
	E_STATUS_t u8_Retval = E_NOK;
	TCCR0 |= NO_CLK_SRC;
	return u8_Retval;
}

E_STATUS_t TIMER0_GetCompareValue(ptr_uint8_t pu8_TicksNumber)
{
	E_STATUS_t u8_Retval = E_NOK;
	*pu8_TicksNumber = OCR0;
	return u8_Retval;
}
E_STATUS_t TIMER0_SetCompareValue(uint8_t u8_TicksNumber)
{
	E_STATUS_t u8_Retval = E_NOK;
	OCR0 = u8_TicksNumber;
	return u8_Retval;
}

E_STATUS_t TIMER0_GetCounterValue(ptr_uint8_t pu8_TicksNumber)
{
	E_STATUS_t u8_Retval = E_NOK;
	*pu8_TicksNumber = TCNT0;
	return u8_Retval;
}
E_STATUS_t TIMER0_SetCounterValue(uint8_t u8_TicksNumber)
{
	E_STATUS_t u8_Retval = E_NOK;
	TCNT0 = u8_TicksNumber;
	return u8_Retval;
}

E_STATUS_t TIMER0_GetOverflowValue(ptr_uint8_t pu8_TicksNumber)
{
	E_STATUS_t u8_Retval = E_NOK;
	*pu8_TicksNumber = u8_TOVNumber;
	return u8_Retval;
}
E_STATUS_t TIMER0_SetOverflowValue(uint8_t u8_TicksNumber)
{
	E_STATUS_t u8_Retval = E_OK;
	u8_TOVNumber = u8_TicksNumber;
	return u8_Retval;
}

void TIMER0_CALLBACK_CompareMatch_INTERRUPT(PTR_VoidFuncVoid_t callback)
{
	CALLBACK_CM = callback;
}

void TIMER0_CALLBACK_Overflow_INTERRUPT(PTR_VoidFuncVoid_t callback)
{
	CALLBACK_OVF = callback;
}

void Timer0_Fast_PWM(uint8_t speed)
{

	TIMER0_SetCounterValue(0);
	GPIO_setupPinDirection(PORTB_ID, PIN3, PIN_OUTPUT);
	//uint16_t val = ((float)(speed/100)*255);
	OCR0  =  (short)(((float)speed/100)*255 + 0.5); // Set Compare Value
	/*
	TCNT0 = 0; //Set Timer Initial value
	OCR0  =  (short)(((float)speed/100)*255 + 0.5); // Set Compare Value
	GPIO_setupPinDirection(PORTB_ID, PIN3, PIN_OUTPUT);
	/* Configure timer control register
	 * 1. Fast PWM mode FOC0=0
	 * 2. Fast PWM Mode WGM01=1 & WGM00=1
	 * 3. Clear OC0 when match occurs (non inverted mode) COM00=0 & COM01=1
	 * 4. clock = F_CPU/8 CS00=0 CS01=1 CS02=0
	 */
	/*
	TCCR0 = (1<<WGM00) | (1<<WGM01) | (1<<COM01) | (1<<CS01);

	*/
}

ISR(TIMER0_COMP_vect)
{
	CALLBACK_CM();
}

ISR(TIMER0_OVF_vect)
{
	u8_TOVNumber++;
	CALLBACK_OVF();
}
