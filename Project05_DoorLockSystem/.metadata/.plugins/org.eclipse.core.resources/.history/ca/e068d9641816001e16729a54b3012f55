/*
 * Timers.h
 *
 * Created: 10/7/2021 11:39:09 AM
 *  Author: Aly Maher
 */ 


#ifndef TIMER1_H_
#define TIMER1_H_


/******************************************************************************
*                               INCLUDES			                          *
*******************************************************************************/
#include <avr/io.h>
#include <avr/interrupt.h>
#include "../LIBS/std_types.h"
#include "../LIBS/Utils.h"

/******************************************************************************
*									ENUMS	                				  *
*******************************************************************************/
typedef enum 
{
	NORMAL,
	CTC = 0x08,		
}TIMER1_MODE_t;

typedef enum
{
	OCIE_DISABLE = 0x00,
	OCIE_ENABLE = 0x02
}OCMIE1_t;

typedef enum
{
	TOIE_DISABLE = 0x00,
	TOIE_ENABLE = 0x01
}TOVFIE1_t;

typedef enum
{
	NO_CLK_SRC,
	NO_PRESCALING,
	PRESCALING_CLK8,
	PRESCALING_CLK64,
	PRESCALING_CLK256,
	PRESCALING_CLK1024,
	EXT_CLK_FALLING,
	EXT_CLK_RISING,
}TIMER1_CLOCK_t;

/******************************************************************************
*									STRUCT	                				  *
*******************************************************************************/
typedef struct 
{
	TIMER1_MODE_t mode;
	OCMIE1_t  ocmInterrupt;
	TOVFIE1_t ovfInterrupt;
	TIMER1_CLOCK_t clk;
}STIMER1_CONFIG;

/******************************************************************************
*									APIS				                      *
*******************************************************************************/
E_STATUS_t TIMER1_Init(STIMER1_CONFIG* configuartion);
E_STATUS_t TIMER1_Stop();

E_STATUS_t TIMER1_GetCompareValue(ptr_uint8 pu8_TicksNumber);
E_STATUS_t TIMER1_SetCompareValue(uint8 u8_TicksNumber);

E_STATUS_t TIMER1_GetCounterValue(ptr_uint8 pu8_TicksNumber);
E_STATUS_t TIMER1_SetCounterValue(uint8 u8_TicksNumber);

E_STATUS_t TIMER1_GetOverflowValue(ptr_uint8 pu8_TicksNumber);
E_STATUS_t TIMER1_SetOverflowValue(uint8_t u8_TicksNumber);

void TIMER1_CALLBACK_Overflow_INTERRUPT(PTR_VoidFuncVoid_t callback);
void TIMER1_CALLBACK_CompareMatch_INTERRUPT(PTR_VoidFuncVoid_t callback);

#endif /* TIMERS_H_ */
