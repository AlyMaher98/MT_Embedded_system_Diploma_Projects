
Project_Stopwatch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001f82  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00001f82  00002016  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000d  00800068  00800068  0000201e  2**0
                  ALLOC
  3 .stab         0000195c  00000000  00000000  00002020  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000ecc  00000000  00000000  0000397c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00004848  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00004988  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00004af8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00006741  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000762c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  000083dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000853c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  000087c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00008f97  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 7d 0a 	jmp	0x14fa	; 0x14fa <__vector_1>
       8:	0c 94 93 0a 	jmp	0x1526	; 0x1526 <__vector_2>
       c:	0c 94 c1 0a 	jmp	0x1582	; 0x1582 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 e0 06 	jmp	0xdc0	; 0xdc0 <__vector_10>
      2c:	0c 94 0d 07 	jmp	0xe1a	; 0xe1a <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	a5 37       	cpi	r26, 0x75	; 117
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	10 e0       	ldi	r17, 0x00	; 0
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	e2 e8       	ldi	r30, 0x82	; 130
      78:	ff e1       	ldi	r31, 0x1F	; 31
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <main>
      8a:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 88 0f 	jmp	0x1f10	; 0x1f10 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 a4 0f 	jmp	0x1f48	; 0x1f48 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 94 0f 	jmp	0x1f28	; 0x1f28 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 b0 0f 	jmp	0x1f60	; 0x1f60 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 94 0f 	jmp	0x1f28	; 0x1f28 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 b0 0f 	jmp	0x1f60	; 0x1f60 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 88 0f 	jmp	0x1f10	; 0x1f10 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 a4 0f 	jmp	0x1f48	; 0x1f48 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 94 0f 	jmp	0x1f28	; 0x1f28 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 b0 0f 	jmp	0x1f60	; 0x1f60 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 94 0f 	jmp	0x1f28	; 0x1f28 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 b0 0f 	jmp	0x1f60	; 0x1f60 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 94 0f 	jmp	0x1f28	; 0x1f28 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 b0 0f 	jmp	0x1f60	; 0x1f60 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 98 0f 	jmp	0x1f30	; 0x1f30 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 b4 0f 	jmp	0x1f68	; 0x1f68 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <TIMER0_Init>:

/******************************************************************************
*								 APIS IMPLEMENTATION			              *
*******************************************************************************/
E_STATUS_t TIMER0_Init(STIMER0_CONFIG* configuartion)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <TIMER0_Init+0x6>
     b4c:	0f 92       	push	r0
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
     b52:	9b 83       	std	Y+3, r25	; 0x03
     b54:	8a 83       	std	Y+2, r24	; 0x02
	E_STATUS_t u8_Retval = E_NOK;
     b56:	81 e0       	ldi	r24, 0x01	; 1
     b58:	89 83       	std	Y+1, r24	; 0x01
	if (NULL_PTR == configuartion)
     b5a:	8a 81       	ldd	r24, Y+2	; 0x02
     b5c:	9b 81       	ldd	r25, Y+3	; 0x03
     b5e:	00 97       	sbiw	r24, 0x00	; 0
     b60:	19 f4       	brne	.+6      	; 0xb68 <TIMER0_Init+0x22>
	{
		u8_Retval = E_NOK;
     b62:	81 e0       	ldi	r24, 0x01	; 1
     b64:	89 83       	std	Y+1, r24	; 0x01
     b66:	77 c0       	rjmp	.+238    	; 0xc56 <TIMER0_Init+0x110>
	}
	else
	{
		TIMER0_Configurations = configuartion;
     b68:	8a 81       	ldd	r24, Y+2	; 0x02
     b6a:	9b 81       	ldd	r25, Y+3	; 0x03
     b6c:	90 93 6c 00 	sts	0x006C, r25
     b70:	80 93 6b 00 	sts	0x006B, r24
		if ((NORMAL == TIMER0_Configurations->mode) || (CTC == TIMER0_Configurations->mode))
     b74:	e0 91 6b 00 	lds	r30, 0x006B
     b78:	f0 91 6c 00 	lds	r31, 0x006C
     b7c:	80 81       	ld	r24, Z
     b7e:	88 23       	and	r24, r24
     b80:	39 f0       	breq	.+14     	; 0xb90 <TIMER0_Init+0x4a>
     b82:	e0 91 6b 00 	lds	r30, 0x006B
     b86:	f0 91 6c 00 	lds	r31, 0x006C
     b8a:	80 81       	ld	r24, Z
     b8c:	88 30       	cpi	r24, 0x08	; 8
     b8e:	71 f4       	brne	.+28     	; 0xbac <TIMER0_Init+0x66>
		{
			TCCR0 |= TIMER0_Configurations->mode;
     b90:	a3 e5       	ldi	r26, 0x53	; 83
     b92:	b0 e0       	ldi	r27, 0x00	; 0
     b94:	e3 e5       	ldi	r30, 0x53	; 83
     b96:	f0 e0       	ldi	r31, 0x00	; 0
     b98:	90 81       	ld	r25, Z
     b9a:	e0 91 6b 00 	lds	r30, 0x006B
     b9e:	f0 91 6c 00 	lds	r31, 0x006C
     ba2:	80 81       	ld	r24, Z
     ba4:	89 2b       	or	r24, r25
     ba6:	8c 93       	st	X, r24
			u8_Retval = E_OK;
     ba8:	19 82       	std	Y+1, r1	; 0x01
     baa:	02 c0       	rjmp	.+4      	; 0xbb0 <TIMER0_Init+0x6a>
		}
		else
		{
			u8_Retval = E_NOK;
     bac:	81 e0       	ldi	r24, 0x01	; 1
     bae:	89 83       	std	Y+1, r24	; 0x01
		}
		if ((NO_CLK_SRC <= TIMER0_Configurations->clk) && (EXT_CLK_RISING >= TIMER0_Configurations->clk))
     bb0:	e0 91 6b 00 	lds	r30, 0x006B
     bb4:	f0 91 6c 00 	lds	r31, 0x006C
     bb8:	83 81       	ldd	r24, Z+3	; 0x03
     bba:	88 30       	cpi	r24, 0x08	; 8
     bbc:	70 f4       	brcc	.+28     	; 0xbda <TIMER0_Init+0x94>
		{
			TCCR0 |= TIMER0_Configurations->clk;
     bbe:	a3 e5       	ldi	r26, 0x53	; 83
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e3 e5       	ldi	r30, 0x53	; 83
     bc4:	f0 e0       	ldi	r31, 0x00	; 0
     bc6:	90 81       	ld	r25, Z
     bc8:	e0 91 6b 00 	lds	r30, 0x006B
     bcc:	f0 91 6c 00 	lds	r31, 0x006C
     bd0:	83 81       	ldd	r24, Z+3	; 0x03
     bd2:	89 2b       	or	r24, r25
     bd4:	8c 93       	st	X, r24
			u8_Retval = E_OK;
     bd6:	19 82       	std	Y+1, r1	; 0x01
     bd8:	02 c0       	rjmp	.+4      	; 0xbde <TIMER0_Init+0x98>
		}
		else
		{
			u8_Retval = E_NOK;
     bda:	81 e0       	ldi	r24, 0x01	; 1
     bdc:	89 83       	std	Y+1, r24	; 0x01
		}
		if ((OCIE_DISABLE == TIMER0_Configurations->ocmInterrupt) || (OCIE_ENABLE == TIMER0_Configurations->ocmInterrupt))
     bde:	e0 91 6b 00 	lds	r30, 0x006B
     be2:	f0 91 6c 00 	lds	r31, 0x006C
     be6:	81 81       	ldd	r24, Z+1	; 0x01
     be8:	88 23       	and	r24, r24
     bea:	39 f0       	breq	.+14     	; 0xbfa <TIMER0_Init+0xb4>
     bec:	e0 91 6b 00 	lds	r30, 0x006B
     bf0:	f0 91 6c 00 	lds	r31, 0x006C
     bf4:	81 81       	ldd	r24, Z+1	; 0x01
     bf6:	82 30       	cpi	r24, 0x02	; 2
     bf8:	71 f4       	brne	.+28     	; 0xc16 <TIMER0_Init+0xd0>
		{
			TIMSK |= TIMER0_Configurations->ocmInterrupt;
     bfa:	a9 e5       	ldi	r26, 0x59	; 89
     bfc:	b0 e0       	ldi	r27, 0x00	; 0
     bfe:	e9 e5       	ldi	r30, 0x59	; 89
     c00:	f0 e0       	ldi	r31, 0x00	; 0
     c02:	90 81       	ld	r25, Z
     c04:	e0 91 6b 00 	lds	r30, 0x006B
     c08:	f0 91 6c 00 	lds	r31, 0x006C
     c0c:	81 81       	ldd	r24, Z+1	; 0x01
     c0e:	89 2b       	or	r24, r25
     c10:	8c 93       	st	X, r24
			u8_Retval = E_OK;
     c12:	19 82       	std	Y+1, r1	; 0x01
     c14:	02 c0       	rjmp	.+4      	; 0xc1a <TIMER0_Init+0xd4>
		}
		else
		{
			u8_Retval = E_NOK;
     c16:	81 e0       	ldi	r24, 0x01	; 1
     c18:	89 83       	std	Y+1, r24	; 0x01
		}
		if ((TOIE_DISABLE == TIMER0_Configurations->ovfInterrupt) || (TOIE_ENABLE == TIMER0_Configurations->ovfInterrupt))
     c1a:	e0 91 6b 00 	lds	r30, 0x006B
     c1e:	f0 91 6c 00 	lds	r31, 0x006C
     c22:	82 81       	ldd	r24, Z+2	; 0x02
     c24:	88 23       	and	r24, r24
     c26:	39 f0       	breq	.+14     	; 0xc36 <TIMER0_Init+0xf0>
     c28:	e0 91 6b 00 	lds	r30, 0x006B
     c2c:	f0 91 6c 00 	lds	r31, 0x006C
     c30:	82 81       	ldd	r24, Z+2	; 0x02
     c32:	81 30       	cpi	r24, 0x01	; 1
     c34:	71 f4       	brne	.+28     	; 0xc52 <TIMER0_Init+0x10c>
		{
			TIMSK |= TIMER0_Configurations->ovfInterrupt;
     c36:	a9 e5       	ldi	r26, 0x59	; 89
     c38:	b0 e0       	ldi	r27, 0x00	; 0
     c3a:	e9 e5       	ldi	r30, 0x59	; 89
     c3c:	f0 e0       	ldi	r31, 0x00	; 0
     c3e:	90 81       	ld	r25, Z
     c40:	e0 91 6b 00 	lds	r30, 0x006B
     c44:	f0 91 6c 00 	lds	r31, 0x006C
     c48:	82 81       	ldd	r24, Z+2	; 0x02
     c4a:	89 2b       	or	r24, r25
     c4c:	8c 93       	st	X, r24
			u8_Retval = E_OK;
     c4e:	19 82       	std	Y+1, r1	; 0x01
     c50:	02 c0       	rjmp	.+4      	; 0xc56 <TIMER0_Init+0x110>
		}
		else
		{
			u8_Retval = E_NOK;
     c52:	81 e0       	ldi	r24, 0x01	; 1
     c54:	89 83       	std	Y+1, r24	; 0x01
		}
	}
	
	return u8_Retval;
     c56:	89 81       	ldd	r24, Y+1	; 0x01
}
     c58:	0f 90       	pop	r0
     c5a:	0f 90       	pop	r0
     c5c:	0f 90       	pop	r0
     c5e:	cf 91       	pop	r28
     c60:	df 91       	pop	r29
     c62:	08 95       	ret

00000c64 <TIMER0_Stop>:

E_STATUS_t TIMER0_Stop()
{
     c64:	df 93       	push	r29
     c66:	cf 93       	push	r28
     c68:	0f 92       	push	r0
     c6a:	cd b7       	in	r28, 0x3d	; 61
     c6c:	de b7       	in	r29, 0x3e	; 62
	E_STATUS_t u8_Retval = E_NOK;
     c6e:	81 e0       	ldi	r24, 0x01	; 1
     c70:	89 83       	std	Y+1, r24	; 0x01
	TCCR0 |= NO_CLK_SRC;
     c72:	a3 e5       	ldi	r26, 0x53	; 83
     c74:	b0 e0       	ldi	r27, 0x00	; 0
     c76:	e3 e5       	ldi	r30, 0x53	; 83
     c78:	f0 e0       	ldi	r31, 0x00	; 0
     c7a:	80 81       	ld	r24, Z
     c7c:	8c 93       	st	X, r24
	return u8_Retval;
     c7e:	89 81       	ldd	r24, Y+1	; 0x01
}
     c80:	0f 90       	pop	r0
     c82:	cf 91       	pop	r28
     c84:	df 91       	pop	r29
     c86:	08 95       	ret

00000c88 <TIMER0_GetCompareValue>:

E_STATUS_t TIMER0_GetCompareValue(ptr_uint8_t pu8_TicksNumber)
{
     c88:	df 93       	push	r29
     c8a:	cf 93       	push	r28
     c8c:	00 d0       	rcall	.+0      	; 0xc8e <TIMER0_GetCompareValue+0x6>
     c8e:	0f 92       	push	r0
     c90:	cd b7       	in	r28, 0x3d	; 61
     c92:	de b7       	in	r29, 0x3e	; 62
     c94:	9b 83       	std	Y+3, r25	; 0x03
     c96:	8a 83       	std	Y+2, r24	; 0x02
	E_STATUS_t u8_Retval = E_NOK;
     c98:	81 e0       	ldi	r24, 0x01	; 1
     c9a:	89 83       	std	Y+1, r24	; 0x01
	*pu8_TicksNumber = OCR0;
     c9c:	ec e5       	ldi	r30, 0x5C	; 92
     c9e:	f0 e0       	ldi	r31, 0x00	; 0
     ca0:	80 81       	ld	r24, Z
     ca2:	ea 81       	ldd	r30, Y+2	; 0x02
     ca4:	fb 81       	ldd	r31, Y+3	; 0x03
     ca6:	80 83       	st	Z, r24
	return u8_Retval;
     ca8:	89 81       	ldd	r24, Y+1	; 0x01
}
     caa:	0f 90       	pop	r0
     cac:	0f 90       	pop	r0
     cae:	0f 90       	pop	r0
     cb0:	cf 91       	pop	r28
     cb2:	df 91       	pop	r29
     cb4:	08 95       	ret

00000cb6 <TIMER0_SetCompareValue>:
E_STATUS_t TIMER0_SetCompareValue(uint8_t u8_TicksNumber)
{
     cb6:	df 93       	push	r29
     cb8:	cf 93       	push	r28
     cba:	00 d0       	rcall	.+0      	; 0xcbc <TIMER0_SetCompareValue+0x6>
     cbc:	cd b7       	in	r28, 0x3d	; 61
     cbe:	de b7       	in	r29, 0x3e	; 62
     cc0:	8a 83       	std	Y+2, r24	; 0x02
	E_STATUS_t u8_Retval = E_NOK;
     cc2:	81 e0       	ldi	r24, 0x01	; 1
     cc4:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = u8_TicksNumber;
     cc6:	ec e5       	ldi	r30, 0x5C	; 92
     cc8:	f0 e0       	ldi	r31, 0x00	; 0
     cca:	8a 81       	ldd	r24, Y+2	; 0x02
     ccc:	80 83       	st	Z, r24
	return u8_Retval;
     cce:	89 81       	ldd	r24, Y+1	; 0x01
}
     cd0:	0f 90       	pop	r0
     cd2:	0f 90       	pop	r0
     cd4:	cf 91       	pop	r28
     cd6:	df 91       	pop	r29
     cd8:	08 95       	ret

00000cda <TIMER0_GetCounterValue>:

E_STATUS_t TIMER0_GetCounterValue(ptr_uint8_t pu8_TicksNumber)
{
     cda:	df 93       	push	r29
     cdc:	cf 93       	push	r28
     cde:	00 d0       	rcall	.+0      	; 0xce0 <TIMER0_GetCounterValue+0x6>
     ce0:	0f 92       	push	r0
     ce2:	cd b7       	in	r28, 0x3d	; 61
     ce4:	de b7       	in	r29, 0x3e	; 62
     ce6:	9b 83       	std	Y+3, r25	; 0x03
     ce8:	8a 83       	std	Y+2, r24	; 0x02
	E_STATUS_t u8_Retval = E_NOK;
     cea:	81 e0       	ldi	r24, 0x01	; 1
     cec:	89 83       	std	Y+1, r24	; 0x01
	*pu8_TicksNumber = TCNT0;
     cee:	e2 e5       	ldi	r30, 0x52	; 82
     cf0:	f0 e0       	ldi	r31, 0x00	; 0
     cf2:	80 81       	ld	r24, Z
     cf4:	ea 81       	ldd	r30, Y+2	; 0x02
     cf6:	fb 81       	ldd	r31, Y+3	; 0x03
     cf8:	80 83       	st	Z, r24
	return u8_Retval;
     cfa:	89 81       	ldd	r24, Y+1	; 0x01
}
     cfc:	0f 90       	pop	r0
     cfe:	0f 90       	pop	r0
     d00:	0f 90       	pop	r0
     d02:	cf 91       	pop	r28
     d04:	df 91       	pop	r29
     d06:	08 95       	ret

00000d08 <TIMER0_SetCounterValue>:
E_STATUS_t TIMER0_SetCounterValue(uint8_t u8_TicksNumber)
{
     d08:	df 93       	push	r29
     d0a:	cf 93       	push	r28
     d0c:	00 d0       	rcall	.+0      	; 0xd0e <TIMER0_SetCounterValue+0x6>
     d0e:	cd b7       	in	r28, 0x3d	; 61
     d10:	de b7       	in	r29, 0x3e	; 62
     d12:	8a 83       	std	Y+2, r24	; 0x02
	E_STATUS_t u8_Retval = E_NOK;
     d14:	81 e0       	ldi	r24, 0x01	; 1
     d16:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = u8_TicksNumber;
     d18:	e2 e5       	ldi	r30, 0x52	; 82
     d1a:	f0 e0       	ldi	r31, 0x00	; 0
     d1c:	8a 81       	ldd	r24, Y+2	; 0x02
     d1e:	80 83       	st	Z, r24
	return u8_Retval;
     d20:	89 81       	ldd	r24, Y+1	; 0x01
}
     d22:	0f 90       	pop	r0
     d24:	0f 90       	pop	r0
     d26:	cf 91       	pop	r28
     d28:	df 91       	pop	r29
     d2a:	08 95       	ret

00000d2c <TIMER0_GetOverflowValue>:

E_STATUS_t TIMER0_GetOverflowValue(ptr_uint8_t pu8_TicksNumber)
{
     d2c:	df 93       	push	r29
     d2e:	cf 93       	push	r28
     d30:	00 d0       	rcall	.+0      	; 0xd32 <TIMER0_GetOverflowValue+0x6>
     d32:	0f 92       	push	r0
     d34:	cd b7       	in	r28, 0x3d	; 61
     d36:	de b7       	in	r29, 0x3e	; 62
     d38:	9b 83       	std	Y+3, r25	; 0x03
     d3a:	8a 83       	std	Y+2, r24	; 0x02
	E_STATUS_t u8_Retval = E_NOK;
     d3c:	81 e0       	ldi	r24, 0x01	; 1
     d3e:	89 83       	std	Y+1, r24	; 0x01
	*pu8_TicksNumber = u8_TOVNumber;
     d40:	80 91 68 00 	lds	r24, 0x0068
     d44:	ea 81       	ldd	r30, Y+2	; 0x02
     d46:	fb 81       	ldd	r31, Y+3	; 0x03
     d48:	80 83       	st	Z, r24
	return u8_Retval;
     d4a:	89 81       	ldd	r24, Y+1	; 0x01
}
     d4c:	0f 90       	pop	r0
     d4e:	0f 90       	pop	r0
     d50:	0f 90       	pop	r0
     d52:	cf 91       	pop	r28
     d54:	df 91       	pop	r29
     d56:	08 95       	ret

00000d58 <TIMER0_SetOverflowValue>:
E_STATUS_t TIMER0_SetOverflowValue(uint8_t u8_TicksNumber)
{
     d58:	df 93       	push	r29
     d5a:	cf 93       	push	r28
     d5c:	00 d0       	rcall	.+0      	; 0xd5e <TIMER0_SetOverflowValue+0x6>
     d5e:	cd b7       	in	r28, 0x3d	; 61
     d60:	de b7       	in	r29, 0x3e	; 62
     d62:	8a 83       	std	Y+2, r24	; 0x02
	E_STATUS_t u8_Retval = E_OK;
     d64:	19 82       	std	Y+1, r1	; 0x01
	u8_TOVNumber = u8_TicksNumber;
     d66:	8a 81       	ldd	r24, Y+2	; 0x02
     d68:	80 93 68 00 	sts	0x0068, r24
	return u8_Retval;
     d6c:	89 81       	ldd	r24, Y+1	; 0x01
}
     d6e:	0f 90       	pop	r0
     d70:	0f 90       	pop	r0
     d72:	cf 91       	pop	r28
     d74:	df 91       	pop	r29
     d76:	08 95       	ret

00000d78 <TIMER0_CALLBACK_CompareMatch_INTERRUPT>:

void TIMER0_CALLBACK_CompareMatch_INTERRUPT(PTR_VoidFuncVoid_t callback)
{
     d78:	df 93       	push	r29
     d7a:	cf 93       	push	r28
     d7c:	00 d0       	rcall	.+0      	; 0xd7e <TIMER0_CALLBACK_CompareMatch_INTERRUPT+0x6>
     d7e:	cd b7       	in	r28, 0x3d	; 61
     d80:	de b7       	in	r29, 0x3e	; 62
     d82:	9a 83       	std	Y+2, r25	; 0x02
     d84:	89 83       	std	Y+1, r24	; 0x01
	CALLBACK_CM = callback;
     d86:	89 81       	ldd	r24, Y+1	; 0x01
     d88:	9a 81       	ldd	r25, Y+2	; 0x02
     d8a:	90 93 6a 00 	sts	0x006A, r25
     d8e:	80 93 69 00 	sts	0x0069, r24
}
     d92:	0f 90       	pop	r0
     d94:	0f 90       	pop	r0
     d96:	cf 91       	pop	r28
     d98:	df 91       	pop	r29
     d9a:	08 95       	ret

00000d9c <TIMER0_CALLBACK_Overflow_INTERRUPT>:

void TIMER0_CALLBACK_Overflow_INTERRUPT(PTR_VoidFuncVoid_t callback)
{
     d9c:	df 93       	push	r29
     d9e:	cf 93       	push	r28
     da0:	00 d0       	rcall	.+0      	; 0xda2 <TIMER0_CALLBACK_Overflow_INTERRUPT+0x6>
     da2:	cd b7       	in	r28, 0x3d	; 61
     da4:	de b7       	in	r29, 0x3e	; 62
     da6:	9a 83       	std	Y+2, r25	; 0x02
     da8:	89 83       	std	Y+1, r24	; 0x01
	CALLBACK_OVF = callback;
     daa:	89 81       	ldd	r24, Y+1	; 0x01
     dac:	9a 81       	ldd	r25, Y+2	; 0x02
     dae:	90 93 6e 00 	sts	0x006E, r25
     db2:	80 93 6d 00 	sts	0x006D, r24
}
     db6:	0f 90       	pop	r0
     db8:	0f 90       	pop	r0
     dba:	cf 91       	pop	r28
     dbc:	df 91       	pop	r29
     dbe:	08 95       	ret

00000dc0 <__vector_10>:

ISR(TIMER0_COMP_vect)
{
     dc0:	1f 92       	push	r1
     dc2:	0f 92       	push	r0
     dc4:	0f b6       	in	r0, 0x3f	; 63
     dc6:	0f 92       	push	r0
     dc8:	11 24       	eor	r1, r1
     dca:	2f 93       	push	r18
     dcc:	3f 93       	push	r19
     dce:	4f 93       	push	r20
     dd0:	5f 93       	push	r21
     dd2:	6f 93       	push	r22
     dd4:	7f 93       	push	r23
     dd6:	8f 93       	push	r24
     dd8:	9f 93       	push	r25
     dda:	af 93       	push	r26
     ddc:	bf 93       	push	r27
     dde:	ef 93       	push	r30
     de0:	ff 93       	push	r31
     de2:	df 93       	push	r29
     de4:	cf 93       	push	r28
     de6:	cd b7       	in	r28, 0x3d	; 61
     de8:	de b7       	in	r29, 0x3e	; 62
	CALLBACK_CM();
     dea:	e0 91 69 00 	lds	r30, 0x0069
     dee:	f0 91 6a 00 	lds	r31, 0x006A
     df2:	09 95       	icall
}
     df4:	cf 91       	pop	r28
     df6:	df 91       	pop	r29
     df8:	ff 91       	pop	r31
     dfa:	ef 91       	pop	r30
     dfc:	bf 91       	pop	r27
     dfe:	af 91       	pop	r26
     e00:	9f 91       	pop	r25
     e02:	8f 91       	pop	r24
     e04:	7f 91       	pop	r23
     e06:	6f 91       	pop	r22
     e08:	5f 91       	pop	r21
     e0a:	4f 91       	pop	r20
     e0c:	3f 91       	pop	r19
     e0e:	2f 91       	pop	r18
     e10:	0f 90       	pop	r0
     e12:	0f be       	out	0x3f, r0	; 63
     e14:	0f 90       	pop	r0
     e16:	1f 90       	pop	r1
     e18:	18 95       	reti

00000e1a <__vector_11>:

ISR(TIMER0_OVF_vect)
{
     e1a:	1f 92       	push	r1
     e1c:	0f 92       	push	r0
     e1e:	0f b6       	in	r0, 0x3f	; 63
     e20:	0f 92       	push	r0
     e22:	11 24       	eor	r1, r1
     e24:	2f 93       	push	r18
     e26:	3f 93       	push	r19
     e28:	4f 93       	push	r20
     e2a:	5f 93       	push	r21
     e2c:	6f 93       	push	r22
     e2e:	7f 93       	push	r23
     e30:	8f 93       	push	r24
     e32:	9f 93       	push	r25
     e34:	af 93       	push	r26
     e36:	bf 93       	push	r27
     e38:	ef 93       	push	r30
     e3a:	ff 93       	push	r31
     e3c:	df 93       	push	r29
     e3e:	cf 93       	push	r28
     e40:	cd b7       	in	r28, 0x3d	; 61
     e42:	de b7       	in	r29, 0x3e	; 62
	u8_TOVNumber++;
     e44:	80 91 68 00 	lds	r24, 0x0068
     e48:	8f 5f       	subi	r24, 0xFF	; 255
     e4a:	80 93 68 00 	sts	0x0068, r24
	CALLBACK_OVF();
     e4e:	e0 91 6d 00 	lds	r30, 0x006D
     e52:	f0 91 6e 00 	lds	r31, 0x006E
     e56:	09 95       	icall
}
     e58:	cf 91       	pop	r28
     e5a:	df 91       	pop	r29
     e5c:	ff 91       	pop	r31
     e5e:	ef 91       	pop	r30
     e60:	bf 91       	pop	r27
     e62:	af 91       	pop	r26
     e64:	9f 91       	pop	r25
     e66:	8f 91       	pop	r24
     e68:	7f 91       	pop	r23
     e6a:	6f 91       	pop	r22
     e6c:	5f 91       	pop	r21
     e6e:	4f 91       	pop	r20
     e70:	3f 91       	pop	r19
     e72:	2f 91       	pop	r18
     e74:	0f 90       	pop	r0
     e76:	0f be       	out	0x3f, r0	; 63
     e78:	0f 90       	pop	r0
     e7a:	1f 90       	pop	r1
     e7c:	18 95       	reti

00000e7e <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8_t port_num, uint8_t pin_num, GPIO_PinDirectionType direction)
{
     e7e:	df 93       	push	r29
     e80:	cf 93       	push	r28
     e82:	00 d0       	rcall	.+0      	; 0xe84 <GPIO_setupPinDirection+0x6>
     e84:	00 d0       	rcall	.+0      	; 0xe86 <GPIO_setupPinDirection+0x8>
     e86:	0f 92       	push	r0
     e88:	cd b7       	in	r28, 0x3d	; 61
     e8a:	de b7       	in	r29, 0x3e	; 62
     e8c:	89 83       	std	Y+1, r24	; 0x01
     e8e:	6a 83       	std	Y+2, r22	; 0x02
     e90:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     e92:	8a 81       	ldd	r24, Y+2	; 0x02
     e94:	88 30       	cpi	r24, 0x08	; 8
     e96:	08 f0       	brcs	.+2      	; 0xe9a <GPIO_setupPinDirection+0x1c>
     e98:	d5 c0       	rjmp	.+426    	; 0x1044 <GPIO_setupPinDirection+0x1c6>
     e9a:	89 81       	ldd	r24, Y+1	; 0x01
     e9c:	84 30       	cpi	r24, 0x04	; 4
     e9e:	08 f0       	brcs	.+2      	; 0xea2 <GPIO_setupPinDirection+0x24>
     ea0:	d1 c0       	rjmp	.+418    	; 0x1044 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     ea2:	89 81       	ldd	r24, Y+1	; 0x01
     ea4:	28 2f       	mov	r18, r24
     ea6:	30 e0       	ldi	r19, 0x00	; 0
     ea8:	3d 83       	std	Y+5, r19	; 0x05
     eaa:	2c 83       	std	Y+4, r18	; 0x04
     eac:	8c 81       	ldd	r24, Y+4	; 0x04
     eae:	9d 81       	ldd	r25, Y+5	; 0x05
     eb0:	81 30       	cpi	r24, 0x01	; 1
     eb2:	91 05       	cpc	r25, r1
     eb4:	09 f4       	brne	.+2      	; 0xeb8 <GPIO_setupPinDirection+0x3a>
     eb6:	43 c0       	rjmp	.+134    	; 0xf3e <GPIO_setupPinDirection+0xc0>
     eb8:	2c 81       	ldd	r18, Y+4	; 0x04
     eba:	3d 81       	ldd	r19, Y+5	; 0x05
     ebc:	22 30       	cpi	r18, 0x02	; 2
     ebe:	31 05       	cpc	r19, r1
     ec0:	2c f4       	brge	.+10     	; 0xecc <GPIO_setupPinDirection+0x4e>
     ec2:	8c 81       	ldd	r24, Y+4	; 0x04
     ec4:	9d 81       	ldd	r25, Y+5	; 0x05
     ec6:	00 97       	sbiw	r24, 0x00	; 0
     ec8:	71 f0       	breq	.+28     	; 0xee6 <GPIO_setupPinDirection+0x68>
     eca:	bc c0       	rjmp	.+376    	; 0x1044 <GPIO_setupPinDirection+0x1c6>
     ecc:	2c 81       	ldd	r18, Y+4	; 0x04
     ece:	3d 81       	ldd	r19, Y+5	; 0x05
     ed0:	22 30       	cpi	r18, 0x02	; 2
     ed2:	31 05       	cpc	r19, r1
     ed4:	09 f4       	brne	.+2      	; 0xed8 <GPIO_setupPinDirection+0x5a>
     ed6:	5f c0       	rjmp	.+190    	; 0xf96 <GPIO_setupPinDirection+0x118>
     ed8:	8c 81       	ldd	r24, Y+4	; 0x04
     eda:	9d 81       	ldd	r25, Y+5	; 0x05
     edc:	83 30       	cpi	r24, 0x03	; 3
     ede:	91 05       	cpc	r25, r1
     ee0:	09 f4       	brne	.+2      	; 0xee4 <GPIO_setupPinDirection+0x66>
     ee2:	85 c0       	rjmp	.+266    	; 0xfee <GPIO_setupPinDirection+0x170>
     ee4:	af c0       	rjmp	.+350    	; 0x1044 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     ee6:	8b 81       	ldd	r24, Y+3	; 0x03
     ee8:	81 30       	cpi	r24, 0x01	; 1
     eea:	a1 f4       	brne	.+40     	; 0xf14 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     eec:	aa e3       	ldi	r26, 0x3A	; 58
     eee:	b0 e0       	ldi	r27, 0x00	; 0
     ef0:	ea e3       	ldi	r30, 0x3A	; 58
     ef2:	f0 e0       	ldi	r31, 0x00	; 0
     ef4:	80 81       	ld	r24, Z
     ef6:	48 2f       	mov	r20, r24
     ef8:	8a 81       	ldd	r24, Y+2	; 0x02
     efa:	28 2f       	mov	r18, r24
     efc:	30 e0       	ldi	r19, 0x00	; 0
     efe:	81 e0       	ldi	r24, 0x01	; 1
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	02 2e       	mov	r0, r18
     f04:	02 c0       	rjmp	.+4      	; 0xf0a <GPIO_setupPinDirection+0x8c>
     f06:	88 0f       	add	r24, r24
     f08:	99 1f       	adc	r25, r25
     f0a:	0a 94       	dec	r0
     f0c:	e2 f7       	brpl	.-8      	; 0xf06 <GPIO_setupPinDirection+0x88>
     f0e:	84 2b       	or	r24, r20
     f10:	8c 93       	st	X, r24
     f12:	98 c0       	rjmp	.+304    	; 0x1044 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
     f14:	aa e3       	ldi	r26, 0x3A	; 58
     f16:	b0 e0       	ldi	r27, 0x00	; 0
     f18:	ea e3       	ldi	r30, 0x3A	; 58
     f1a:	f0 e0       	ldi	r31, 0x00	; 0
     f1c:	80 81       	ld	r24, Z
     f1e:	48 2f       	mov	r20, r24
     f20:	8a 81       	ldd	r24, Y+2	; 0x02
     f22:	28 2f       	mov	r18, r24
     f24:	30 e0       	ldi	r19, 0x00	; 0
     f26:	81 e0       	ldi	r24, 0x01	; 1
     f28:	90 e0       	ldi	r25, 0x00	; 0
     f2a:	02 2e       	mov	r0, r18
     f2c:	02 c0       	rjmp	.+4      	; 0xf32 <GPIO_setupPinDirection+0xb4>
     f2e:	88 0f       	add	r24, r24
     f30:	99 1f       	adc	r25, r25
     f32:	0a 94       	dec	r0
     f34:	e2 f7       	brpl	.-8      	; 0xf2e <GPIO_setupPinDirection+0xb0>
     f36:	80 95       	com	r24
     f38:	84 23       	and	r24, r20
     f3a:	8c 93       	st	X, r24
     f3c:	83 c0       	rjmp	.+262    	; 0x1044 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     f3e:	8b 81       	ldd	r24, Y+3	; 0x03
     f40:	81 30       	cpi	r24, 0x01	; 1
     f42:	a1 f4       	brne	.+40     	; 0xf6c <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
     f44:	a7 e3       	ldi	r26, 0x37	; 55
     f46:	b0 e0       	ldi	r27, 0x00	; 0
     f48:	e7 e3       	ldi	r30, 0x37	; 55
     f4a:	f0 e0       	ldi	r31, 0x00	; 0
     f4c:	80 81       	ld	r24, Z
     f4e:	48 2f       	mov	r20, r24
     f50:	8a 81       	ldd	r24, Y+2	; 0x02
     f52:	28 2f       	mov	r18, r24
     f54:	30 e0       	ldi	r19, 0x00	; 0
     f56:	81 e0       	ldi	r24, 0x01	; 1
     f58:	90 e0       	ldi	r25, 0x00	; 0
     f5a:	02 2e       	mov	r0, r18
     f5c:	02 c0       	rjmp	.+4      	; 0xf62 <GPIO_setupPinDirection+0xe4>
     f5e:	88 0f       	add	r24, r24
     f60:	99 1f       	adc	r25, r25
     f62:	0a 94       	dec	r0
     f64:	e2 f7       	brpl	.-8      	; 0xf5e <GPIO_setupPinDirection+0xe0>
     f66:	84 2b       	or	r24, r20
     f68:	8c 93       	st	X, r24
     f6a:	6c c0       	rjmp	.+216    	; 0x1044 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
     f6c:	a7 e3       	ldi	r26, 0x37	; 55
     f6e:	b0 e0       	ldi	r27, 0x00	; 0
     f70:	e7 e3       	ldi	r30, 0x37	; 55
     f72:	f0 e0       	ldi	r31, 0x00	; 0
     f74:	80 81       	ld	r24, Z
     f76:	48 2f       	mov	r20, r24
     f78:	8a 81       	ldd	r24, Y+2	; 0x02
     f7a:	28 2f       	mov	r18, r24
     f7c:	30 e0       	ldi	r19, 0x00	; 0
     f7e:	81 e0       	ldi	r24, 0x01	; 1
     f80:	90 e0       	ldi	r25, 0x00	; 0
     f82:	02 2e       	mov	r0, r18
     f84:	02 c0       	rjmp	.+4      	; 0xf8a <GPIO_setupPinDirection+0x10c>
     f86:	88 0f       	add	r24, r24
     f88:	99 1f       	adc	r25, r25
     f8a:	0a 94       	dec	r0
     f8c:	e2 f7       	brpl	.-8      	; 0xf86 <GPIO_setupPinDirection+0x108>
     f8e:	80 95       	com	r24
     f90:	84 23       	and	r24, r20
     f92:	8c 93       	st	X, r24
     f94:	57 c0       	rjmp	.+174    	; 0x1044 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
     f96:	8b 81       	ldd	r24, Y+3	; 0x03
     f98:	81 30       	cpi	r24, 0x01	; 1
     f9a:	a1 f4       	brne	.+40     	; 0xfc4 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
     f9c:	a4 e3       	ldi	r26, 0x34	; 52
     f9e:	b0 e0       	ldi	r27, 0x00	; 0
     fa0:	e4 e3       	ldi	r30, 0x34	; 52
     fa2:	f0 e0       	ldi	r31, 0x00	; 0
     fa4:	80 81       	ld	r24, Z
     fa6:	48 2f       	mov	r20, r24
     fa8:	8a 81       	ldd	r24, Y+2	; 0x02
     faa:	28 2f       	mov	r18, r24
     fac:	30 e0       	ldi	r19, 0x00	; 0
     fae:	81 e0       	ldi	r24, 0x01	; 1
     fb0:	90 e0       	ldi	r25, 0x00	; 0
     fb2:	02 2e       	mov	r0, r18
     fb4:	02 c0       	rjmp	.+4      	; 0xfba <GPIO_setupPinDirection+0x13c>
     fb6:	88 0f       	add	r24, r24
     fb8:	99 1f       	adc	r25, r25
     fba:	0a 94       	dec	r0
     fbc:	e2 f7       	brpl	.-8      	; 0xfb6 <GPIO_setupPinDirection+0x138>
     fbe:	84 2b       	or	r24, r20
     fc0:	8c 93       	st	X, r24
     fc2:	40 c0       	rjmp	.+128    	; 0x1044 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
     fc4:	a4 e3       	ldi	r26, 0x34	; 52
     fc6:	b0 e0       	ldi	r27, 0x00	; 0
     fc8:	e4 e3       	ldi	r30, 0x34	; 52
     fca:	f0 e0       	ldi	r31, 0x00	; 0
     fcc:	80 81       	ld	r24, Z
     fce:	48 2f       	mov	r20, r24
     fd0:	8a 81       	ldd	r24, Y+2	; 0x02
     fd2:	28 2f       	mov	r18, r24
     fd4:	30 e0       	ldi	r19, 0x00	; 0
     fd6:	81 e0       	ldi	r24, 0x01	; 1
     fd8:	90 e0       	ldi	r25, 0x00	; 0
     fda:	02 2e       	mov	r0, r18
     fdc:	02 c0       	rjmp	.+4      	; 0xfe2 <GPIO_setupPinDirection+0x164>
     fde:	88 0f       	add	r24, r24
     fe0:	99 1f       	adc	r25, r25
     fe2:	0a 94       	dec	r0
     fe4:	e2 f7       	brpl	.-8      	; 0xfde <GPIO_setupPinDirection+0x160>
     fe6:	80 95       	com	r24
     fe8:	84 23       	and	r24, r20
     fea:	8c 93       	st	X, r24
     fec:	2b c0       	rjmp	.+86     	; 0x1044 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
     fee:	8b 81       	ldd	r24, Y+3	; 0x03
     ff0:	81 30       	cpi	r24, 0x01	; 1
     ff2:	a1 f4       	brne	.+40     	; 0x101c <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
     ff4:	a1 e3       	ldi	r26, 0x31	; 49
     ff6:	b0 e0       	ldi	r27, 0x00	; 0
     ff8:	e1 e3       	ldi	r30, 0x31	; 49
     ffa:	f0 e0       	ldi	r31, 0x00	; 0
     ffc:	80 81       	ld	r24, Z
     ffe:	48 2f       	mov	r20, r24
    1000:	8a 81       	ldd	r24, Y+2	; 0x02
    1002:	28 2f       	mov	r18, r24
    1004:	30 e0       	ldi	r19, 0x00	; 0
    1006:	81 e0       	ldi	r24, 0x01	; 1
    1008:	90 e0       	ldi	r25, 0x00	; 0
    100a:	02 2e       	mov	r0, r18
    100c:	02 c0       	rjmp	.+4      	; 0x1012 <GPIO_setupPinDirection+0x194>
    100e:	88 0f       	add	r24, r24
    1010:	99 1f       	adc	r25, r25
    1012:	0a 94       	dec	r0
    1014:	e2 f7       	brpl	.-8      	; 0x100e <GPIO_setupPinDirection+0x190>
    1016:	84 2b       	or	r24, r20
    1018:	8c 93       	st	X, r24
    101a:	14 c0       	rjmp	.+40     	; 0x1044 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    101c:	a1 e3       	ldi	r26, 0x31	; 49
    101e:	b0 e0       	ldi	r27, 0x00	; 0
    1020:	e1 e3       	ldi	r30, 0x31	; 49
    1022:	f0 e0       	ldi	r31, 0x00	; 0
    1024:	80 81       	ld	r24, Z
    1026:	48 2f       	mov	r20, r24
    1028:	8a 81       	ldd	r24, Y+2	; 0x02
    102a:	28 2f       	mov	r18, r24
    102c:	30 e0       	ldi	r19, 0x00	; 0
    102e:	81 e0       	ldi	r24, 0x01	; 1
    1030:	90 e0       	ldi	r25, 0x00	; 0
    1032:	02 2e       	mov	r0, r18
    1034:	02 c0       	rjmp	.+4      	; 0x103a <GPIO_setupPinDirection+0x1bc>
    1036:	88 0f       	add	r24, r24
    1038:	99 1f       	adc	r25, r25
    103a:	0a 94       	dec	r0
    103c:	e2 f7       	brpl	.-8      	; 0x1036 <GPIO_setupPinDirection+0x1b8>
    103e:	80 95       	com	r24
    1040:	84 23       	and	r24, r20
    1042:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1044:	0f 90       	pop	r0
    1046:	0f 90       	pop	r0
    1048:	0f 90       	pop	r0
    104a:	0f 90       	pop	r0
    104c:	0f 90       	pop	r0
    104e:	cf 91       	pop	r28
    1050:	df 91       	pop	r29
    1052:	08 95       	ret

00001054 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8_t port_num, uint8_t pin_num, uint8_t value)
{
    1054:	df 93       	push	r29
    1056:	cf 93       	push	r28
    1058:	00 d0       	rcall	.+0      	; 0x105a <GPIO_writePin+0x6>
    105a:	00 d0       	rcall	.+0      	; 0x105c <GPIO_writePin+0x8>
    105c:	0f 92       	push	r0
    105e:	cd b7       	in	r28, 0x3d	; 61
    1060:	de b7       	in	r29, 0x3e	; 62
    1062:	89 83       	std	Y+1, r24	; 0x01
    1064:	6a 83       	std	Y+2, r22	; 0x02
    1066:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1068:	8a 81       	ldd	r24, Y+2	; 0x02
    106a:	88 30       	cpi	r24, 0x08	; 8
    106c:	08 f0       	brcs	.+2      	; 0x1070 <GPIO_writePin+0x1c>
    106e:	d5 c0       	rjmp	.+426    	; 0x121a <GPIO_writePin+0x1c6>
    1070:	89 81       	ldd	r24, Y+1	; 0x01
    1072:	84 30       	cpi	r24, 0x04	; 4
    1074:	08 f0       	brcs	.+2      	; 0x1078 <GPIO_writePin+0x24>
    1076:	d1 c0       	rjmp	.+418    	; 0x121a <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1078:	89 81       	ldd	r24, Y+1	; 0x01
    107a:	28 2f       	mov	r18, r24
    107c:	30 e0       	ldi	r19, 0x00	; 0
    107e:	3d 83       	std	Y+5, r19	; 0x05
    1080:	2c 83       	std	Y+4, r18	; 0x04
    1082:	8c 81       	ldd	r24, Y+4	; 0x04
    1084:	9d 81       	ldd	r25, Y+5	; 0x05
    1086:	81 30       	cpi	r24, 0x01	; 1
    1088:	91 05       	cpc	r25, r1
    108a:	09 f4       	brne	.+2      	; 0x108e <GPIO_writePin+0x3a>
    108c:	43 c0       	rjmp	.+134    	; 0x1114 <GPIO_writePin+0xc0>
    108e:	2c 81       	ldd	r18, Y+4	; 0x04
    1090:	3d 81       	ldd	r19, Y+5	; 0x05
    1092:	22 30       	cpi	r18, 0x02	; 2
    1094:	31 05       	cpc	r19, r1
    1096:	2c f4       	brge	.+10     	; 0x10a2 <GPIO_writePin+0x4e>
    1098:	8c 81       	ldd	r24, Y+4	; 0x04
    109a:	9d 81       	ldd	r25, Y+5	; 0x05
    109c:	00 97       	sbiw	r24, 0x00	; 0
    109e:	71 f0       	breq	.+28     	; 0x10bc <GPIO_writePin+0x68>
    10a0:	bc c0       	rjmp	.+376    	; 0x121a <GPIO_writePin+0x1c6>
    10a2:	2c 81       	ldd	r18, Y+4	; 0x04
    10a4:	3d 81       	ldd	r19, Y+5	; 0x05
    10a6:	22 30       	cpi	r18, 0x02	; 2
    10a8:	31 05       	cpc	r19, r1
    10aa:	09 f4       	brne	.+2      	; 0x10ae <GPIO_writePin+0x5a>
    10ac:	5f c0       	rjmp	.+190    	; 0x116c <GPIO_writePin+0x118>
    10ae:	8c 81       	ldd	r24, Y+4	; 0x04
    10b0:	9d 81       	ldd	r25, Y+5	; 0x05
    10b2:	83 30       	cpi	r24, 0x03	; 3
    10b4:	91 05       	cpc	r25, r1
    10b6:	09 f4       	brne	.+2      	; 0x10ba <GPIO_writePin+0x66>
    10b8:	85 c0       	rjmp	.+266    	; 0x11c4 <GPIO_writePin+0x170>
    10ba:	af c0       	rjmp	.+350    	; 0x121a <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    10bc:	8b 81       	ldd	r24, Y+3	; 0x03
    10be:	81 30       	cpi	r24, 0x01	; 1
    10c0:	a1 f4       	brne	.+40     	; 0x10ea <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    10c2:	ab e3       	ldi	r26, 0x3B	; 59
    10c4:	b0 e0       	ldi	r27, 0x00	; 0
    10c6:	eb e3       	ldi	r30, 0x3B	; 59
    10c8:	f0 e0       	ldi	r31, 0x00	; 0
    10ca:	80 81       	ld	r24, Z
    10cc:	48 2f       	mov	r20, r24
    10ce:	8a 81       	ldd	r24, Y+2	; 0x02
    10d0:	28 2f       	mov	r18, r24
    10d2:	30 e0       	ldi	r19, 0x00	; 0
    10d4:	81 e0       	ldi	r24, 0x01	; 1
    10d6:	90 e0       	ldi	r25, 0x00	; 0
    10d8:	02 2e       	mov	r0, r18
    10da:	02 c0       	rjmp	.+4      	; 0x10e0 <GPIO_writePin+0x8c>
    10dc:	88 0f       	add	r24, r24
    10de:	99 1f       	adc	r25, r25
    10e0:	0a 94       	dec	r0
    10e2:	e2 f7       	brpl	.-8      	; 0x10dc <GPIO_writePin+0x88>
    10e4:	84 2b       	or	r24, r20
    10e6:	8c 93       	st	X, r24
    10e8:	98 c0       	rjmp	.+304    	; 0x121a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    10ea:	ab e3       	ldi	r26, 0x3B	; 59
    10ec:	b0 e0       	ldi	r27, 0x00	; 0
    10ee:	eb e3       	ldi	r30, 0x3B	; 59
    10f0:	f0 e0       	ldi	r31, 0x00	; 0
    10f2:	80 81       	ld	r24, Z
    10f4:	48 2f       	mov	r20, r24
    10f6:	8a 81       	ldd	r24, Y+2	; 0x02
    10f8:	28 2f       	mov	r18, r24
    10fa:	30 e0       	ldi	r19, 0x00	; 0
    10fc:	81 e0       	ldi	r24, 0x01	; 1
    10fe:	90 e0       	ldi	r25, 0x00	; 0
    1100:	02 2e       	mov	r0, r18
    1102:	02 c0       	rjmp	.+4      	; 0x1108 <GPIO_writePin+0xb4>
    1104:	88 0f       	add	r24, r24
    1106:	99 1f       	adc	r25, r25
    1108:	0a 94       	dec	r0
    110a:	e2 f7       	brpl	.-8      	; 0x1104 <GPIO_writePin+0xb0>
    110c:	80 95       	com	r24
    110e:	84 23       	and	r24, r20
    1110:	8c 93       	st	X, r24
    1112:	83 c0       	rjmp	.+262    	; 0x121a <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1114:	8b 81       	ldd	r24, Y+3	; 0x03
    1116:	81 30       	cpi	r24, 0x01	; 1
    1118:	a1 f4       	brne	.+40     	; 0x1142 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    111a:	a8 e3       	ldi	r26, 0x38	; 56
    111c:	b0 e0       	ldi	r27, 0x00	; 0
    111e:	e8 e3       	ldi	r30, 0x38	; 56
    1120:	f0 e0       	ldi	r31, 0x00	; 0
    1122:	80 81       	ld	r24, Z
    1124:	48 2f       	mov	r20, r24
    1126:	8a 81       	ldd	r24, Y+2	; 0x02
    1128:	28 2f       	mov	r18, r24
    112a:	30 e0       	ldi	r19, 0x00	; 0
    112c:	81 e0       	ldi	r24, 0x01	; 1
    112e:	90 e0       	ldi	r25, 0x00	; 0
    1130:	02 2e       	mov	r0, r18
    1132:	02 c0       	rjmp	.+4      	; 0x1138 <GPIO_writePin+0xe4>
    1134:	88 0f       	add	r24, r24
    1136:	99 1f       	adc	r25, r25
    1138:	0a 94       	dec	r0
    113a:	e2 f7       	brpl	.-8      	; 0x1134 <GPIO_writePin+0xe0>
    113c:	84 2b       	or	r24, r20
    113e:	8c 93       	st	X, r24
    1140:	6c c0       	rjmp	.+216    	; 0x121a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1142:	a8 e3       	ldi	r26, 0x38	; 56
    1144:	b0 e0       	ldi	r27, 0x00	; 0
    1146:	e8 e3       	ldi	r30, 0x38	; 56
    1148:	f0 e0       	ldi	r31, 0x00	; 0
    114a:	80 81       	ld	r24, Z
    114c:	48 2f       	mov	r20, r24
    114e:	8a 81       	ldd	r24, Y+2	; 0x02
    1150:	28 2f       	mov	r18, r24
    1152:	30 e0       	ldi	r19, 0x00	; 0
    1154:	81 e0       	ldi	r24, 0x01	; 1
    1156:	90 e0       	ldi	r25, 0x00	; 0
    1158:	02 2e       	mov	r0, r18
    115a:	02 c0       	rjmp	.+4      	; 0x1160 <GPIO_writePin+0x10c>
    115c:	88 0f       	add	r24, r24
    115e:	99 1f       	adc	r25, r25
    1160:	0a 94       	dec	r0
    1162:	e2 f7       	brpl	.-8      	; 0x115c <GPIO_writePin+0x108>
    1164:	80 95       	com	r24
    1166:	84 23       	and	r24, r20
    1168:	8c 93       	st	X, r24
    116a:	57 c0       	rjmp	.+174    	; 0x121a <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    116c:	8b 81       	ldd	r24, Y+3	; 0x03
    116e:	81 30       	cpi	r24, 0x01	; 1
    1170:	a1 f4       	brne	.+40     	; 0x119a <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1172:	a5 e3       	ldi	r26, 0x35	; 53
    1174:	b0 e0       	ldi	r27, 0x00	; 0
    1176:	e5 e3       	ldi	r30, 0x35	; 53
    1178:	f0 e0       	ldi	r31, 0x00	; 0
    117a:	80 81       	ld	r24, Z
    117c:	48 2f       	mov	r20, r24
    117e:	8a 81       	ldd	r24, Y+2	; 0x02
    1180:	28 2f       	mov	r18, r24
    1182:	30 e0       	ldi	r19, 0x00	; 0
    1184:	81 e0       	ldi	r24, 0x01	; 1
    1186:	90 e0       	ldi	r25, 0x00	; 0
    1188:	02 2e       	mov	r0, r18
    118a:	02 c0       	rjmp	.+4      	; 0x1190 <GPIO_writePin+0x13c>
    118c:	88 0f       	add	r24, r24
    118e:	99 1f       	adc	r25, r25
    1190:	0a 94       	dec	r0
    1192:	e2 f7       	brpl	.-8      	; 0x118c <GPIO_writePin+0x138>
    1194:	84 2b       	or	r24, r20
    1196:	8c 93       	st	X, r24
    1198:	40 c0       	rjmp	.+128    	; 0x121a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    119a:	a5 e3       	ldi	r26, 0x35	; 53
    119c:	b0 e0       	ldi	r27, 0x00	; 0
    119e:	e5 e3       	ldi	r30, 0x35	; 53
    11a0:	f0 e0       	ldi	r31, 0x00	; 0
    11a2:	80 81       	ld	r24, Z
    11a4:	48 2f       	mov	r20, r24
    11a6:	8a 81       	ldd	r24, Y+2	; 0x02
    11a8:	28 2f       	mov	r18, r24
    11aa:	30 e0       	ldi	r19, 0x00	; 0
    11ac:	81 e0       	ldi	r24, 0x01	; 1
    11ae:	90 e0       	ldi	r25, 0x00	; 0
    11b0:	02 2e       	mov	r0, r18
    11b2:	02 c0       	rjmp	.+4      	; 0x11b8 <GPIO_writePin+0x164>
    11b4:	88 0f       	add	r24, r24
    11b6:	99 1f       	adc	r25, r25
    11b8:	0a 94       	dec	r0
    11ba:	e2 f7       	brpl	.-8      	; 0x11b4 <GPIO_writePin+0x160>
    11bc:	80 95       	com	r24
    11be:	84 23       	and	r24, r20
    11c0:	8c 93       	st	X, r24
    11c2:	2b c0       	rjmp	.+86     	; 0x121a <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    11c4:	8b 81       	ldd	r24, Y+3	; 0x03
    11c6:	81 30       	cpi	r24, 0x01	; 1
    11c8:	a1 f4       	brne	.+40     	; 0x11f2 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    11ca:	a2 e3       	ldi	r26, 0x32	; 50
    11cc:	b0 e0       	ldi	r27, 0x00	; 0
    11ce:	e2 e3       	ldi	r30, 0x32	; 50
    11d0:	f0 e0       	ldi	r31, 0x00	; 0
    11d2:	80 81       	ld	r24, Z
    11d4:	48 2f       	mov	r20, r24
    11d6:	8a 81       	ldd	r24, Y+2	; 0x02
    11d8:	28 2f       	mov	r18, r24
    11da:	30 e0       	ldi	r19, 0x00	; 0
    11dc:	81 e0       	ldi	r24, 0x01	; 1
    11de:	90 e0       	ldi	r25, 0x00	; 0
    11e0:	02 2e       	mov	r0, r18
    11e2:	02 c0       	rjmp	.+4      	; 0x11e8 <GPIO_writePin+0x194>
    11e4:	88 0f       	add	r24, r24
    11e6:	99 1f       	adc	r25, r25
    11e8:	0a 94       	dec	r0
    11ea:	e2 f7       	brpl	.-8      	; 0x11e4 <GPIO_writePin+0x190>
    11ec:	84 2b       	or	r24, r20
    11ee:	8c 93       	st	X, r24
    11f0:	14 c0       	rjmp	.+40     	; 0x121a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    11f2:	a2 e3       	ldi	r26, 0x32	; 50
    11f4:	b0 e0       	ldi	r27, 0x00	; 0
    11f6:	e2 e3       	ldi	r30, 0x32	; 50
    11f8:	f0 e0       	ldi	r31, 0x00	; 0
    11fa:	80 81       	ld	r24, Z
    11fc:	48 2f       	mov	r20, r24
    11fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1200:	28 2f       	mov	r18, r24
    1202:	30 e0       	ldi	r19, 0x00	; 0
    1204:	81 e0       	ldi	r24, 0x01	; 1
    1206:	90 e0       	ldi	r25, 0x00	; 0
    1208:	02 2e       	mov	r0, r18
    120a:	02 c0       	rjmp	.+4      	; 0x1210 <GPIO_writePin+0x1bc>
    120c:	88 0f       	add	r24, r24
    120e:	99 1f       	adc	r25, r25
    1210:	0a 94       	dec	r0
    1212:	e2 f7       	brpl	.-8      	; 0x120c <GPIO_writePin+0x1b8>
    1214:	80 95       	com	r24
    1216:	84 23       	and	r24, r20
    1218:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    121a:	0f 90       	pop	r0
    121c:	0f 90       	pop	r0
    121e:	0f 90       	pop	r0
    1220:	0f 90       	pop	r0
    1222:	0f 90       	pop	r0
    1224:	cf 91       	pop	r28
    1226:	df 91       	pop	r29
    1228:	08 95       	ret

0000122a <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8_t GPIO_readPin(uint8_t port_num, uint8_t pin_num)
{
    122a:	df 93       	push	r29
    122c:	cf 93       	push	r28
    122e:	00 d0       	rcall	.+0      	; 0x1230 <GPIO_readPin+0x6>
    1230:	00 d0       	rcall	.+0      	; 0x1232 <GPIO_readPin+0x8>
    1232:	0f 92       	push	r0
    1234:	cd b7       	in	r28, 0x3d	; 61
    1236:	de b7       	in	r29, 0x3e	; 62
    1238:	8a 83       	std	Y+2, r24	; 0x02
    123a:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t pin_value = LOGIC_LOW;
    123c:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    123e:	8b 81       	ldd	r24, Y+3	; 0x03
    1240:	88 30       	cpi	r24, 0x08	; 8
    1242:	08 f0       	brcs	.+2      	; 0x1246 <GPIO_readPin+0x1c>
    1244:	84 c0       	rjmp	.+264    	; 0x134e <GPIO_readPin+0x124>
    1246:	8a 81       	ldd	r24, Y+2	; 0x02
    1248:	84 30       	cpi	r24, 0x04	; 4
    124a:	08 f0       	brcs	.+2      	; 0x124e <GPIO_readPin+0x24>
    124c:	80 c0       	rjmp	.+256    	; 0x134e <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    124e:	8a 81       	ldd	r24, Y+2	; 0x02
    1250:	28 2f       	mov	r18, r24
    1252:	30 e0       	ldi	r19, 0x00	; 0
    1254:	3d 83       	std	Y+5, r19	; 0x05
    1256:	2c 83       	std	Y+4, r18	; 0x04
    1258:	4c 81       	ldd	r20, Y+4	; 0x04
    125a:	5d 81       	ldd	r21, Y+5	; 0x05
    125c:	41 30       	cpi	r20, 0x01	; 1
    125e:	51 05       	cpc	r21, r1
    1260:	79 f1       	breq	.+94     	; 0x12c0 <GPIO_readPin+0x96>
    1262:	8c 81       	ldd	r24, Y+4	; 0x04
    1264:	9d 81       	ldd	r25, Y+5	; 0x05
    1266:	82 30       	cpi	r24, 0x02	; 2
    1268:	91 05       	cpc	r25, r1
    126a:	34 f4       	brge	.+12     	; 0x1278 <GPIO_readPin+0x4e>
    126c:	2c 81       	ldd	r18, Y+4	; 0x04
    126e:	3d 81       	ldd	r19, Y+5	; 0x05
    1270:	21 15       	cp	r18, r1
    1272:	31 05       	cpc	r19, r1
    1274:	69 f0       	breq	.+26     	; 0x1290 <GPIO_readPin+0x66>
    1276:	6b c0       	rjmp	.+214    	; 0x134e <GPIO_readPin+0x124>
    1278:	4c 81       	ldd	r20, Y+4	; 0x04
    127a:	5d 81       	ldd	r21, Y+5	; 0x05
    127c:	42 30       	cpi	r20, 0x02	; 2
    127e:	51 05       	cpc	r21, r1
    1280:	b9 f1       	breq	.+110    	; 0x12f0 <GPIO_readPin+0xc6>
    1282:	8c 81       	ldd	r24, Y+4	; 0x04
    1284:	9d 81       	ldd	r25, Y+5	; 0x05
    1286:	83 30       	cpi	r24, 0x03	; 3
    1288:	91 05       	cpc	r25, r1
    128a:	09 f4       	brne	.+2      	; 0x128e <GPIO_readPin+0x64>
    128c:	49 c0       	rjmp	.+146    	; 0x1320 <GPIO_readPin+0xf6>
    128e:	5f c0       	rjmp	.+190    	; 0x134e <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1290:	e9 e3       	ldi	r30, 0x39	; 57
    1292:	f0 e0       	ldi	r31, 0x00	; 0
    1294:	80 81       	ld	r24, Z
    1296:	28 2f       	mov	r18, r24
    1298:	30 e0       	ldi	r19, 0x00	; 0
    129a:	8b 81       	ldd	r24, Y+3	; 0x03
    129c:	88 2f       	mov	r24, r24
    129e:	90 e0       	ldi	r25, 0x00	; 0
    12a0:	a9 01       	movw	r20, r18
    12a2:	02 c0       	rjmp	.+4      	; 0x12a8 <GPIO_readPin+0x7e>
    12a4:	55 95       	asr	r21
    12a6:	47 95       	ror	r20
    12a8:	8a 95       	dec	r24
    12aa:	e2 f7       	brpl	.-8      	; 0x12a4 <GPIO_readPin+0x7a>
    12ac:	ca 01       	movw	r24, r20
    12ae:	81 70       	andi	r24, 0x01	; 1
    12b0:	90 70       	andi	r25, 0x00	; 0
    12b2:	88 23       	and	r24, r24
    12b4:	19 f0       	breq	.+6      	; 0x12bc <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    12b6:	81 e0       	ldi	r24, 0x01	; 1
    12b8:	89 83       	std	Y+1, r24	; 0x01
    12ba:	49 c0       	rjmp	.+146    	; 0x134e <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    12bc:	19 82       	std	Y+1, r1	; 0x01
    12be:	47 c0       	rjmp	.+142    	; 0x134e <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    12c0:	e6 e3       	ldi	r30, 0x36	; 54
    12c2:	f0 e0       	ldi	r31, 0x00	; 0
    12c4:	80 81       	ld	r24, Z
    12c6:	28 2f       	mov	r18, r24
    12c8:	30 e0       	ldi	r19, 0x00	; 0
    12ca:	8b 81       	ldd	r24, Y+3	; 0x03
    12cc:	88 2f       	mov	r24, r24
    12ce:	90 e0       	ldi	r25, 0x00	; 0
    12d0:	a9 01       	movw	r20, r18
    12d2:	02 c0       	rjmp	.+4      	; 0x12d8 <GPIO_readPin+0xae>
    12d4:	55 95       	asr	r21
    12d6:	47 95       	ror	r20
    12d8:	8a 95       	dec	r24
    12da:	e2 f7       	brpl	.-8      	; 0x12d4 <GPIO_readPin+0xaa>
    12dc:	ca 01       	movw	r24, r20
    12de:	81 70       	andi	r24, 0x01	; 1
    12e0:	90 70       	andi	r25, 0x00	; 0
    12e2:	88 23       	and	r24, r24
    12e4:	19 f0       	breq	.+6      	; 0x12ec <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    12e6:	81 e0       	ldi	r24, 0x01	; 1
    12e8:	89 83       	std	Y+1, r24	; 0x01
    12ea:	31 c0       	rjmp	.+98     	; 0x134e <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    12ec:	19 82       	std	Y+1, r1	; 0x01
    12ee:	2f c0       	rjmp	.+94     	; 0x134e <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    12f0:	e3 e3       	ldi	r30, 0x33	; 51
    12f2:	f0 e0       	ldi	r31, 0x00	; 0
    12f4:	80 81       	ld	r24, Z
    12f6:	28 2f       	mov	r18, r24
    12f8:	30 e0       	ldi	r19, 0x00	; 0
    12fa:	8b 81       	ldd	r24, Y+3	; 0x03
    12fc:	88 2f       	mov	r24, r24
    12fe:	90 e0       	ldi	r25, 0x00	; 0
    1300:	a9 01       	movw	r20, r18
    1302:	02 c0       	rjmp	.+4      	; 0x1308 <GPIO_readPin+0xde>
    1304:	55 95       	asr	r21
    1306:	47 95       	ror	r20
    1308:	8a 95       	dec	r24
    130a:	e2 f7       	brpl	.-8      	; 0x1304 <GPIO_readPin+0xda>
    130c:	ca 01       	movw	r24, r20
    130e:	81 70       	andi	r24, 0x01	; 1
    1310:	90 70       	andi	r25, 0x00	; 0
    1312:	88 23       	and	r24, r24
    1314:	19 f0       	breq	.+6      	; 0x131c <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1316:	81 e0       	ldi	r24, 0x01	; 1
    1318:	89 83       	std	Y+1, r24	; 0x01
    131a:	19 c0       	rjmp	.+50     	; 0x134e <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    131c:	19 82       	std	Y+1, r1	; 0x01
    131e:	17 c0       	rjmp	.+46     	; 0x134e <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1320:	e0 e3       	ldi	r30, 0x30	; 48
    1322:	f0 e0       	ldi	r31, 0x00	; 0
    1324:	80 81       	ld	r24, Z
    1326:	28 2f       	mov	r18, r24
    1328:	30 e0       	ldi	r19, 0x00	; 0
    132a:	8b 81       	ldd	r24, Y+3	; 0x03
    132c:	88 2f       	mov	r24, r24
    132e:	90 e0       	ldi	r25, 0x00	; 0
    1330:	a9 01       	movw	r20, r18
    1332:	02 c0       	rjmp	.+4      	; 0x1338 <GPIO_readPin+0x10e>
    1334:	55 95       	asr	r21
    1336:	47 95       	ror	r20
    1338:	8a 95       	dec	r24
    133a:	e2 f7       	brpl	.-8      	; 0x1334 <GPIO_readPin+0x10a>
    133c:	ca 01       	movw	r24, r20
    133e:	81 70       	andi	r24, 0x01	; 1
    1340:	90 70       	andi	r25, 0x00	; 0
    1342:	88 23       	and	r24, r24
    1344:	19 f0       	breq	.+6      	; 0x134c <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1346:	81 e0       	ldi	r24, 0x01	; 1
    1348:	89 83       	std	Y+1, r24	; 0x01
    134a:	01 c0       	rjmp	.+2      	; 0x134e <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    134c:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    134e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1350:	0f 90       	pop	r0
    1352:	0f 90       	pop	r0
    1354:	0f 90       	pop	r0
    1356:	0f 90       	pop	r0
    1358:	0f 90       	pop	r0
    135a:	cf 91       	pop	r28
    135c:	df 91       	pop	r29
    135e:	08 95       	ret

00001360 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8_t port_num, GPIO_PortDirectionType direction)
{
    1360:	df 93       	push	r29
    1362:	cf 93       	push	r28
    1364:	00 d0       	rcall	.+0      	; 0x1366 <GPIO_setupPortDirection+0x6>
    1366:	00 d0       	rcall	.+0      	; 0x1368 <GPIO_setupPortDirection+0x8>
    1368:	cd b7       	in	r28, 0x3d	; 61
    136a:	de b7       	in	r29, 0x3e	; 62
    136c:	89 83       	std	Y+1, r24	; 0x01
    136e:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1370:	89 81       	ldd	r24, Y+1	; 0x01
    1372:	84 30       	cpi	r24, 0x04	; 4
    1374:	90 f5       	brcc	.+100    	; 0x13da <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1376:	89 81       	ldd	r24, Y+1	; 0x01
    1378:	28 2f       	mov	r18, r24
    137a:	30 e0       	ldi	r19, 0x00	; 0
    137c:	3c 83       	std	Y+4, r19	; 0x04
    137e:	2b 83       	std	Y+3, r18	; 0x03
    1380:	8b 81       	ldd	r24, Y+3	; 0x03
    1382:	9c 81       	ldd	r25, Y+4	; 0x04
    1384:	81 30       	cpi	r24, 0x01	; 1
    1386:	91 05       	cpc	r25, r1
    1388:	d1 f0       	breq	.+52     	; 0x13be <GPIO_setupPortDirection+0x5e>
    138a:	2b 81       	ldd	r18, Y+3	; 0x03
    138c:	3c 81       	ldd	r19, Y+4	; 0x04
    138e:	22 30       	cpi	r18, 0x02	; 2
    1390:	31 05       	cpc	r19, r1
    1392:	2c f4       	brge	.+10     	; 0x139e <GPIO_setupPortDirection+0x3e>
    1394:	8b 81       	ldd	r24, Y+3	; 0x03
    1396:	9c 81       	ldd	r25, Y+4	; 0x04
    1398:	00 97       	sbiw	r24, 0x00	; 0
    139a:	61 f0       	breq	.+24     	; 0x13b4 <GPIO_setupPortDirection+0x54>
    139c:	1e c0       	rjmp	.+60     	; 0x13da <GPIO_setupPortDirection+0x7a>
    139e:	2b 81       	ldd	r18, Y+3	; 0x03
    13a0:	3c 81       	ldd	r19, Y+4	; 0x04
    13a2:	22 30       	cpi	r18, 0x02	; 2
    13a4:	31 05       	cpc	r19, r1
    13a6:	81 f0       	breq	.+32     	; 0x13c8 <GPIO_setupPortDirection+0x68>
    13a8:	8b 81       	ldd	r24, Y+3	; 0x03
    13aa:	9c 81       	ldd	r25, Y+4	; 0x04
    13ac:	83 30       	cpi	r24, 0x03	; 3
    13ae:	91 05       	cpc	r25, r1
    13b0:	81 f0       	breq	.+32     	; 0x13d2 <GPIO_setupPortDirection+0x72>
    13b2:	13 c0       	rjmp	.+38     	; 0x13da <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    13b4:	ea e3       	ldi	r30, 0x3A	; 58
    13b6:	f0 e0       	ldi	r31, 0x00	; 0
    13b8:	8a 81       	ldd	r24, Y+2	; 0x02
    13ba:	80 83       	st	Z, r24
    13bc:	0e c0       	rjmp	.+28     	; 0x13da <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    13be:	e7 e3       	ldi	r30, 0x37	; 55
    13c0:	f0 e0       	ldi	r31, 0x00	; 0
    13c2:	8a 81       	ldd	r24, Y+2	; 0x02
    13c4:	80 83       	st	Z, r24
    13c6:	09 c0       	rjmp	.+18     	; 0x13da <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    13c8:	e4 e3       	ldi	r30, 0x34	; 52
    13ca:	f0 e0       	ldi	r31, 0x00	; 0
    13cc:	8a 81       	ldd	r24, Y+2	; 0x02
    13ce:	80 83       	st	Z, r24
    13d0:	04 c0       	rjmp	.+8      	; 0x13da <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    13d2:	e1 e3       	ldi	r30, 0x31	; 49
    13d4:	f0 e0       	ldi	r31, 0x00	; 0
    13d6:	8a 81       	ldd	r24, Y+2	; 0x02
    13d8:	80 83       	st	Z, r24
			break;
		}
	}
}
    13da:	0f 90       	pop	r0
    13dc:	0f 90       	pop	r0
    13de:	0f 90       	pop	r0
    13e0:	0f 90       	pop	r0
    13e2:	cf 91       	pop	r28
    13e4:	df 91       	pop	r29
    13e6:	08 95       	ret

000013e8 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8_t port_num, uint8_t value)
{
    13e8:	df 93       	push	r29
    13ea:	cf 93       	push	r28
    13ec:	00 d0       	rcall	.+0      	; 0x13ee <GPIO_writePort+0x6>
    13ee:	00 d0       	rcall	.+0      	; 0x13f0 <GPIO_writePort+0x8>
    13f0:	cd b7       	in	r28, 0x3d	; 61
    13f2:	de b7       	in	r29, 0x3e	; 62
    13f4:	89 83       	std	Y+1, r24	; 0x01
    13f6:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    13f8:	89 81       	ldd	r24, Y+1	; 0x01
    13fa:	84 30       	cpi	r24, 0x04	; 4
    13fc:	90 f5       	brcc	.+100    	; 0x1462 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    13fe:	89 81       	ldd	r24, Y+1	; 0x01
    1400:	28 2f       	mov	r18, r24
    1402:	30 e0       	ldi	r19, 0x00	; 0
    1404:	3c 83       	std	Y+4, r19	; 0x04
    1406:	2b 83       	std	Y+3, r18	; 0x03
    1408:	8b 81       	ldd	r24, Y+3	; 0x03
    140a:	9c 81       	ldd	r25, Y+4	; 0x04
    140c:	81 30       	cpi	r24, 0x01	; 1
    140e:	91 05       	cpc	r25, r1
    1410:	d1 f0       	breq	.+52     	; 0x1446 <GPIO_writePort+0x5e>
    1412:	2b 81       	ldd	r18, Y+3	; 0x03
    1414:	3c 81       	ldd	r19, Y+4	; 0x04
    1416:	22 30       	cpi	r18, 0x02	; 2
    1418:	31 05       	cpc	r19, r1
    141a:	2c f4       	brge	.+10     	; 0x1426 <GPIO_writePort+0x3e>
    141c:	8b 81       	ldd	r24, Y+3	; 0x03
    141e:	9c 81       	ldd	r25, Y+4	; 0x04
    1420:	00 97       	sbiw	r24, 0x00	; 0
    1422:	61 f0       	breq	.+24     	; 0x143c <GPIO_writePort+0x54>
    1424:	1e c0       	rjmp	.+60     	; 0x1462 <GPIO_writePort+0x7a>
    1426:	2b 81       	ldd	r18, Y+3	; 0x03
    1428:	3c 81       	ldd	r19, Y+4	; 0x04
    142a:	22 30       	cpi	r18, 0x02	; 2
    142c:	31 05       	cpc	r19, r1
    142e:	81 f0       	breq	.+32     	; 0x1450 <GPIO_writePort+0x68>
    1430:	8b 81       	ldd	r24, Y+3	; 0x03
    1432:	9c 81       	ldd	r25, Y+4	; 0x04
    1434:	83 30       	cpi	r24, 0x03	; 3
    1436:	91 05       	cpc	r25, r1
    1438:	81 f0       	breq	.+32     	; 0x145a <GPIO_writePort+0x72>
    143a:	13 c0       	rjmp	.+38     	; 0x1462 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    143c:	eb e3       	ldi	r30, 0x3B	; 59
    143e:	f0 e0       	ldi	r31, 0x00	; 0
    1440:	8a 81       	ldd	r24, Y+2	; 0x02
    1442:	80 83       	st	Z, r24
    1444:	0e c0       	rjmp	.+28     	; 0x1462 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1446:	e8 e3       	ldi	r30, 0x38	; 56
    1448:	f0 e0       	ldi	r31, 0x00	; 0
    144a:	8a 81       	ldd	r24, Y+2	; 0x02
    144c:	80 83       	st	Z, r24
    144e:	09 c0       	rjmp	.+18     	; 0x1462 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1450:	e5 e3       	ldi	r30, 0x35	; 53
    1452:	f0 e0       	ldi	r31, 0x00	; 0
    1454:	8a 81       	ldd	r24, Y+2	; 0x02
    1456:	80 83       	st	Z, r24
    1458:	04 c0       	rjmp	.+8      	; 0x1462 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    145a:	e2 e3       	ldi	r30, 0x32	; 50
    145c:	f0 e0       	ldi	r31, 0x00	; 0
    145e:	8a 81       	ldd	r24, Y+2	; 0x02
    1460:	80 83       	st	Z, r24
			break;
		}
	}
}
    1462:	0f 90       	pop	r0
    1464:	0f 90       	pop	r0
    1466:	0f 90       	pop	r0
    1468:	0f 90       	pop	r0
    146a:	cf 91       	pop	r28
    146c:	df 91       	pop	r29
    146e:	08 95       	ret

00001470 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8_t GPIO_readPort(uint8_t port_num)
{
    1470:	df 93       	push	r29
    1472:	cf 93       	push	r28
    1474:	00 d0       	rcall	.+0      	; 0x1476 <GPIO_readPort+0x6>
    1476:	00 d0       	rcall	.+0      	; 0x1478 <GPIO_readPort+0x8>
    1478:	cd b7       	in	r28, 0x3d	; 61
    147a:	de b7       	in	r29, 0x3e	; 62
    147c:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t value = LOGIC_LOW;
    147e:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1480:	8a 81       	ldd	r24, Y+2	; 0x02
    1482:	84 30       	cpi	r24, 0x04	; 4
    1484:	90 f5       	brcc	.+100    	; 0x14ea <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1486:	8a 81       	ldd	r24, Y+2	; 0x02
    1488:	28 2f       	mov	r18, r24
    148a:	30 e0       	ldi	r19, 0x00	; 0
    148c:	3c 83       	std	Y+4, r19	; 0x04
    148e:	2b 83       	std	Y+3, r18	; 0x03
    1490:	8b 81       	ldd	r24, Y+3	; 0x03
    1492:	9c 81       	ldd	r25, Y+4	; 0x04
    1494:	81 30       	cpi	r24, 0x01	; 1
    1496:	91 05       	cpc	r25, r1
    1498:	d1 f0       	breq	.+52     	; 0x14ce <GPIO_readPort+0x5e>
    149a:	2b 81       	ldd	r18, Y+3	; 0x03
    149c:	3c 81       	ldd	r19, Y+4	; 0x04
    149e:	22 30       	cpi	r18, 0x02	; 2
    14a0:	31 05       	cpc	r19, r1
    14a2:	2c f4       	brge	.+10     	; 0x14ae <GPIO_readPort+0x3e>
    14a4:	8b 81       	ldd	r24, Y+3	; 0x03
    14a6:	9c 81       	ldd	r25, Y+4	; 0x04
    14a8:	00 97       	sbiw	r24, 0x00	; 0
    14aa:	61 f0       	breq	.+24     	; 0x14c4 <GPIO_readPort+0x54>
    14ac:	1e c0       	rjmp	.+60     	; 0x14ea <GPIO_readPort+0x7a>
    14ae:	2b 81       	ldd	r18, Y+3	; 0x03
    14b0:	3c 81       	ldd	r19, Y+4	; 0x04
    14b2:	22 30       	cpi	r18, 0x02	; 2
    14b4:	31 05       	cpc	r19, r1
    14b6:	81 f0       	breq	.+32     	; 0x14d8 <GPIO_readPort+0x68>
    14b8:	8b 81       	ldd	r24, Y+3	; 0x03
    14ba:	9c 81       	ldd	r25, Y+4	; 0x04
    14bc:	83 30       	cpi	r24, 0x03	; 3
    14be:	91 05       	cpc	r25, r1
    14c0:	81 f0       	breq	.+32     	; 0x14e2 <GPIO_readPort+0x72>
    14c2:	13 c0       	rjmp	.+38     	; 0x14ea <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    14c4:	e9 e3       	ldi	r30, 0x39	; 57
    14c6:	f0 e0       	ldi	r31, 0x00	; 0
    14c8:	80 81       	ld	r24, Z
    14ca:	89 83       	std	Y+1, r24	; 0x01
    14cc:	0e c0       	rjmp	.+28     	; 0x14ea <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    14ce:	e6 e3       	ldi	r30, 0x36	; 54
    14d0:	f0 e0       	ldi	r31, 0x00	; 0
    14d2:	80 81       	ld	r24, Z
    14d4:	89 83       	std	Y+1, r24	; 0x01
    14d6:	09 c0       	rjmp	.+18     	; 0x14ea <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    14d8:	e3 e3       	ldi	r30, 0x33	; 51
    14da:	f0 e0       	ldi	r31, 0x00	; 0
    14dc:	80 81       	ld	r24, Z
    14de:	89 83       	std	Y+1, r24	; 0x01
    14e0:	04 c0       	rjmp	.+8      	; 0x14ea <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    14e2:	e0 e3       	ldi	r30, 0x30	; 48
    14e4:	f0 e0       	ldi	r31, 0x00	; 0
    14e6:	80 81       	ld	r24, Z
    14e8:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    14ea:	89 81       	ldd	r24, Y+1	; 0x01
}
    14ec:	0f 90       	pop	r0
    14ee:	0f 90       	pop	r0
    14f0:	0f 90       	pop	r0
    14f2:	0f 90       	pop	r0
    14f4:	cf 91       	pop	r28
    14f6:	df 91       	pop	r29
    14f8:	08 95       	ret

000014fa <__vector_1>:
uint8_t minutes_count;
uint8_t hours_count;
uint8_t pause ;

ISR(INT0_vect)
{
    14fa:	1f 92       	push	r1
    14fc:	0f 92       	push	r0
    14fe:	0f b6       	in	r0, 0x3f	; 63
    1500:	0f 92       	push	r0
    1502:	11 24       	eor	r1, r1
    1504:	df 93       	push	r29
    1506:	cf 93       	push	r28
    1508:	cd b7       	in	r28, 0x3d	; 61
    150a:	de b7       	in	r29, 0x3e	; 62
	seconds_count = 0;
    150c:	10 92 70 00 	sts	0x0070, r1
	minutes_count = 0;
    1510:	10 92 74 00 	sts	0x0074, r1
	hours_count = 0;
    1514:	10 92 71 00 	sts	0x0071, r1
}
    1518:	cf 91       	pop	r28
    151a:	df 91       	pop	r29
    151c:	0f 90       	pop	r0
    151e:	0f be       	out	0x3f, r0	; 63
    1520:	0f 90       	pop	r0
    1522:	1f 90       	pop	r1
    1524:	18 95       	reti

00001526 <__vector_2>:
ISR(INT1_vect)
{
    1526:	1f 92       	push	r1
    1528:	0f 92       	push	r0
    152a:	0f b6       	in	r0, 0x3f	; 63
    152c:	0f 92       	push	r0
    152e:	11 24       	eor	r1, r1
    1530:	2f 93       	push	r18
    1532:	3f 93       	push	r19
    1534:	4f 93       	push	r20
    1536:	5f 93       	push	r21
    1538:	6f 93       	push	r22
    153a:	7f 93       	push	r23
    153c:	8f 93       	push	r24
    153e:	9f 93       	push	r25
    1540:	af 93       	push	r26
    1542:	bf 93       	push	r27
    1544:	ef 93       	push	r30
    1546:	ff 93       	push	r31
    1548:	df 93       	push	r29
    154a:	cf 93       	push	r28
    154c:	cd b7       	in	r28, 0x3d	; 61
    154e:	de b7       	in	r29, 0x3e	; 62
	while((GPIO_readPin(PORTB_ID,PIN2_ID)));
    1550:	81 e0       	ldi	r24, 0x01	; 1
    1552:	62 e0       	ldi	r22, 0x02	; 2
    1554:	0e 94 15 09 	call	0x122a	; 0x122a <GPIO_readPin>
    1558:	88 23       	and	r24, r24
    155a:	d1 f7       	brne	.-12     	; 0x1550 <__vector_2+0x2a>
}
    155c:	cf 91       	pop	r28
    155e:	df 91       	pop	r29
    1560:	ff 91       	pop	r31
    1562:	ef 91       	pop	r30
    1564:	bf 91       	pop	r27
    1566:	af 91       	pop	r26
    1568:	9f 91       	pop	r25
    156a:	8f 91       	pop	r24
    156c:	7f 91       	pop	r23
    156e:	6f 91       	pop	r22
    1570:	5f 91       	pop	r21
    1572:	4f 91       	pop	r20
    1574:	3f 91       	pop	r19
    1576:	2f 91       	pop	r18
    1578:	0f 90       	pop	r0
    157a:	0f be       	out	0x3f, r0	; 63
    157c:	0f 90       	pop	r0
    157e:	1f 90       	pop	r1
    1580:	18 95       	reti

00001582 <__vector_3>:
ISR(INT2_vect)
{
    1582:	1f 92       	push	r1
    1584:	0f 92       	push	r0
    1586:	0f b6       	in	r0, 0x3f	; 63
    1588:	0f 92       	push	r0
    158a:	11 24       	eor	r1, r1
    158c:	df 93       	push	r29
    158e:	cf 93       	push	r28
    1590:	cd b7       	in	r28, 0x3d	; 61
    1592:	de b7       	in	r29, 0x3e	; 62
}
    1594:	cf 91       	pop	r28
    1596:	df 91       	pop	r29
    1598:	0f 90       	pop	r0
    159a:	0f be       	out	0x3f, r0	; 63
    159c:	0f 90       	pop	r0
    159e:	1f 90       	pop	r1
    15a0:	18 95       	reti

000015a2 <INT0_Init>:
void INT0_Init(void)
{
    15a2:	df 93       	push	r29
    15a4:	cf 93       	push	r28
    15a6:	cd b7       	in	r28, 0x3d	; 61
    15a8:	de b7       	in	r29, 0x3e	; 62
	SREG  &= ~(1<<7);      // Disable interrupts by clearing I-bit
    15aa:	af e5       	ldi	r26, 0x5F	; 95
    15ac:	b0 e0       	ldi	r27, 0x00	; 0
    15ae:	ef e5       	ldi	r30, 0x5F	; 95
    15b0:	f0 e0       	ldi	r31, 0x00	; 0
    15b2:	80 81       	ld	r24, Z
    15b4:	8f 77       	andi	r24, 0x7F	; 127
    15b6:	8c 93       	st	X, r24
	// Enable external interrupt pin INT0
	GICR  |= (1<<INT0);
    15b8:	ab e5       	ldi	r26, 0x5B	; 91
    15ba:	b0 e0       	ldi	r27, 0x00	; 0
    15bc:	eb e5       	ldi	r30, 0x5B	; 91
    15be:	f0 e0       	ldi	r31, 0x00	; 0
    15c0:	80 81       	ld	r24, Z
    15c2:	80 64       	ori	r24, 0x40	; 64
    15c4:	8c 93       	st	X, r24
	// Trigger INT0 with the falling edge
	MCUCR &= ~(1<<ISC00);
    15c6:	a5 e5       	ldi	r26, 0x55	; 85
    15c8:	b0 e0       	ldi	r27, 0x00	; 0
    15ca:	e5 e5       	ldi	r30, 0x55	; 85
    15cc:	f0 e0       	ldi	r31, 0x00	; 0
    15ce:	80 81       	ld	r24, Z
    15d0:	8e 7f       	andi	r24, 0xFE	; 254
    15d2:	8c 93       	st	X, r24
	MCUCR |= (1<<ISC01);
    15d4:	a5 e5       	ldi	r26, 0x55	; 85
    15d6:	b0 e0       	ldi	r27, 0x00	; 0
    15d8:	e5 e5       	ldi	r30, 0x55	; 85
    15da:	f0 e0       	ldi	r31, 0x00	; 0
    15dc:	80 81       	ld	r24, Z
    15de:	82 60       	ori	r24, 0x02	; 2
    15e0:	8c 93       	st	X, r24
	SREG  |= (1<<7);       // Enable interrupts by setting I-bit
    15e2:	af e5       	ldi	r26, 0x5F	; 95
    15e4:	b0 e0       	ldi	r27, 0x00	; 0
    15e6:	ef e5       	ldi	r30, 0x5F	; 95
    15e8:	f0 e0       	ldi	r31, 0x00	; 0
    15ea:	80 81       	ld	r24, Z
    15ec:	80 68       	ori	r24, 0x80	; 128
    15ee:	8c 93       	st	X, r24
}
    15f0:	cf 91       	pop	r28
    15f2:	df 91       	pop	r29
    15f4:	08 95       	ret

000015f6 <INT1_Init>:
void INT1_Init(void)
{
    15f6:	df 93       	push	r29
    15f8:	cf 93       	push	r28
    15fa:	cd b7       	in	r28, 0x3d	; 61
    15fc:	de b7       	in	r29, 0x3e	; 62
	SREG  &= ~(1<<7);      // Disable interrupts by clearing I-bit
    15fe:	af e5       	ldi	r26, 0x5F	; 95
    1600:	b0 e0       	ldi	r27, 0x00	; 0
    1602:	ef e5       	ldi	r30, 0x5F	; 95
    1604:	f0 e0       	ldi	r31, 0x00	; 0
    1606:	80 81       	ld	r24, Z
    1608:	8f 77       	andi	r24, 0x7F	; 127
    160a:	8c 93       	st	X, r24
	// Enable external interrupt pin INT1
	GICR|=(1<<INT1);
    160c:	ab e5       	ldi	r26, 0x5B	; 91
    160e:	b0 e0       	ldi	r27, 0x00	; 0
    1610:	eb e5       	ldi	r30, 0x5B	; 91
    1612:	f0 e0       	ldi	r31, 0x00	; 0
    1614:	80 81       	ld	r24, Z
    1616:	80 68       	ori	r24, 0x80	; 128
    1618:	8c 93       	st	X, r24
	// Trigger INT1 with the rising edge
	MCUCR |= (1<<ISC10);
    161a:	a5 e5       	ldi	r26, 0x55	; 85
    161c:	b0 e0       	ldi	r27, 0x00	; 0
    161e:	e5 e5       	ldi	r30, 0x55	; 85
    1620:	f0 e0       	ldi	r31, 0x00	; 0
    1622:	80 81       	ld	r24, Z
    1624:	84 60       	ori	r24, 0x04	; 4
    1626:	8c 93       	st	X, r24
	MCUCR |= (1<<ISC11);
    1628:	a5 e5       	ldi	r26, 0x55	; 85
    162a:	b0 e0       	ldi	r27, 0x00	; 0
    162c:	e5 e5       	ldi	r30, 0x55	; 85
    162e:	f0 e0       	ldi	r31, 0x00	; 0
    1630:	80 81       	ld	r24, Z
    1632:	88 60       	ori	r24, 0x08	; 8
    1634:	8c 93       	st	X, r24
	SREG  |= (1<<7);       // Enable interrupts by setting I-bit
    1636:	af e5       	ldi	r26, 0x5F	; 95
    1638:	b0 e0       	ldi	r27, 0x00	; 0
    163a:	ef e5       	ldi	r30, 0x5F	; 95
    163c:	f0 e0       	ldi	r31, 0x00	; 0
    163e:	80 81       	ld	r24, Z
    1640:	80 68       	ori	r24, 0x80	; 128
    1642:	8c 93       	st	X, r24
}
    1644:	cf 91       	pop	r28
    1646:	df 91       	pop	r29
    1648:	08 95       	ret

0000164a <INT2_Init>:
void INT2_Init(void)
{
    164a:	df 93       	push	r29
    164c:	cf 93       	push	r28
    164e:	cd b7       	in	r28, 0x3d	; 61
    1650:	de b7       	in	r29, 0x3e	; 62
	SREG  &= ~(1<<7);      // Disable interrupts by clearing I-bit
    1652:	af e5       	ldi	r26, 0x5F	; 95
    1654:	b0 e0       	ldi	r27, 0x00	; 0
    1656:	ef e5       	ldi	r30, 0x5F	; 95
    1658:	f0 e0       	ldi	r31, 0x00	; 0
    165a:	80 81       	ld	r24, Z
    165c:	8f 77       	andi	r24, 0x7F	; 127
    165e:	8c 93       	st	X, r24
	// Trigger INT2 with the falling edge
	GICR|=(1<<INT2);
    1660:	ab e5       	ldi	r26, 0x5B	; 91
    1662:	b0 e0       	ldi	r27, 0x00	; 0
    1664:	eb e5       	ldi	r30, 0x5B	; 91
    1666:	f0 e0       	ldi	r31, 0x00	; 0
    1668:	80 81       	ld	r24, Z
    166a:	80 62       	ori	r24, 0x20	; 32
    166c:	8c 93       	st	X, r24
	MCUCSR&=~(1<<ISC2);
    166e:	a4 e5       	ldi	r26, 0x54	; 84
    1670:	b0 e0       	ldi	r27, 0x00	; 0
    1672:	e4 e5       	ldi	r30, 0x54	; 84
    1674:	f0 e0       	ldi	r31, 0x00	; 0
    1676:	80 81       	ld	r24, Z
    1678:	8f 7b       	andi	r24, 0xBF	; 191
    167a:	8c 93       	st	X, r24
	SREG  |= (1<<7);       // Enable interrupts by setting I-bit
    167c:	af e5       	ldi	r26, 0x5F	; 95
    167e:	b0 e0       	ldi	r27, 0x00	; 0
    1680:	ef e5       	ldi	r30, 0x5F	; 95
    1682:	f0 e0       	ldi	r31, 0x00	; 0
    1684:	80 81       	ld	r24, Z
    1686:	80 68       	ori	r24, 0x80	; 128
    1688:	8c 93       	st	X, r24

}
    168a:	cf 91       	pop	r28
    168c:	df 91       	pop	r29
    168e:	08 95       	ret

00001690 <OCIE_Callback>:
void OCIE_Callback()
{
    1690:	df 93       	push	r29
    1692:	cf 93       	push	r28
    1694:	cd b7       	in	r28, 0x3d	; 61
    1696:	de b7       	in	r29, 0x3e	; 62
	/* timer interrupt will be called every 250 ms */
	tick++;
    1698:	80 91 72 00 	lds	r24, 0x0072
    169c:	8f 5f       	subi	r24, 0xFF	; 255
    169e:	80 93 72 00 	sts	0x0072, r24
	if (tick==4)
    16a2:	80 91 72 00 	lds	r24, 0x0072
    16a6:	84 30       	cpi	r24, 0x04	; 4
    16a8:	29 f4       	brne	.+10     	; 0x16b4 <OCIE_Callback+0x24>
	{
		count_second_flag=1;
    16aa:	81 e0       	ldi	r24, 0x01	; 1
    16ac:	80 93 73 00 	sts	0x0073, r24
		tick=0;
    16b0:	10 92 72 00 	sts	0x0072, r1
	}
}
    16b4:	cf 91       	pop	r28
    16b6:	df 91       	pop	r29
    16b8:	08 95       	ret

000016ba <main>:

int main(void)
{
    16ba:	0f 93       	push	r16
    16bc:	1f 93       	push	r17
    16be:	df 93       	push	r29
    16c0:	cf 93       	push	r28
    16c2:	cd b7       	in	r28, 0x3d	; 61
    16c4:	de b7       	in	r29, 0x3e	; 62
    16c6:	c8 55       	subi	r28, 0x58	; 88
    16c8:	d0 40       	sbci	r29, 0x00	; 0
    16ca:	0f b6       	in	r0, 0x3f	; 63
    16cc:	f8 94       	cli
    16ce:	de bf       	out	0x3e, r29	; 62
    16d0:	0f be       	out	0x3f, r0	; 63
    16d2:	cd bf       	out	0x3d, r28	; 61
	GPIO_setupPortDirection(PORTA_ID, PORT_OUTPUT);
    16d4:	80 e0       	ldi	r24, 0x00	; 0
    16d6:	6f ef       	ldi	r22, 0xFF	; 255
    16d8:	0e 94 b0 09 	call	0x1360	; 0x1360 <GPIO_setupPortDirection>
	GPIO_setupPortDirection(PORTC_ID, PORT_OUTPUT);
    16dc:	82 e0       	ldi	r24, 0x02	; 2
    16de:	6f ef       	ldi	r22, 0xFF	; 255
    16e0:	0e 94 b0 09 	call	0x1360	; 0x1360 <GPIO_setupPortDirection>
	GPIO_setupPinDirection(PORTB_ID, PIN2_ID, PIN_INPUT);
    16e4:	81 e0       	ldi	r24, 0x01	; 1
    16e6:	62 e0       	ldi	r22, 0x02	; 2
    16e8:	40 e0       	ldi	r20, 0x00	; 0
    16ea:	0e 94 3f 07 	call	0xe7e	; 0xe7e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTD_ID, PIN2_ID, PIN_INPUT);
    16ee:	83 e0       	ldi	r24, 0x03	; 3
    16f0:	62 e0       	ldi	r22, 0x02	; 2
    16f2:	40 e0       	ldi	r20, 0x00	; 0
    16f4:	0e 94 3f 07 	call	0xe7e	; 0xe7e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTD_ID, PIN3_ID, PIN_INPUT);
    16f8:	83 e0       	ldi	r24, 0x03	; 3
    16fa:	63 e0       	ldi	r22, 0x03	; 3
    16fc:	40 e0       	ldi	r20, 0x00	; 0
    16fe:	0e 94 3f 07 	call	0xe7e	; 0xe7e <GPIO_setupPinDirection>
	// enable internal pull up resistor at INT0/PD2 pin
	PORTD |= (1<<PD2);
    1702:	a2 e3       	ldi	r26, 0x32	; 50
    1704:	b0 e0       	ldi	r27, 0x00	; 0
    1706:	e2 e3       	ldi	r30, 0x32	; 50
    1708:	f0 e0       	ldi	r31, 0x00	; 0
    170a:	80 81       	ld	r24, Z
    170c:	84 60       	ori	r24, 0x04	; 4
    170e:	8c 93       	st	X, r24
	// enable internal pull up resistor at INT0/PD2 pin
	PORTB |= (1<<PB2);
    1710:	a8 e3       	ldi	r26, 0x38	; 56
    1712:	b0 e0       	ldi	r27, 0x00	; 0
    1714:	e8 e3       	ldi	r30, 0x38	; 56
    1716:	f0 e0       	ldi	r31, 0x00	; 0
    1718:	80 81       	ld	r24, Z
    171a:	84 60       	ori	r24, 0x04	; 4
    171c:	8c 93       	st	X, r24
	// initialize all the 7-segment with zero value
	//SREG  |= (1<<7);       // Enable interrupts by setting I-bit
	PORTA |= 0x3F;
    171e:	ab e3       	ldi	r26, 0x3B	; 59
    1720:	b0 e0       	ldi	r27, 0x00	; 0
    1722:	eb e3       	ldi	r30, 0x3B	; 59
    1724:	f0 e0       	ldi	r31, 0x00	; 0
    1726:	80 81       	ld	r24, Z
    1728:	8f 63       	ori	r24, 0x3F	; 63
    172a:	8c 93       	st	X, r24
	PORTC &= 0xF0;
    172c:	a5 e3       	ldi	r26, 0x35	; 53
    172e:	b0 e0       	ldi	r27, 0x00	; 0
    1730:	e5 e3       	ldi	r30, 0x35	; 53
    1732:	f0 e0       	ldi	r31, 0x00	; 0
    1734:	80 81       	ld	r24, Z
    1736:	80 7f       	andi	r24, 0xF0	; 240
    1738:	8c 93       	st	X, r24
	sei();
    173a:	78 94       	sei
	STIMER0_CONFIG config = {CTC, OCIE_ENABLE, TOIE_DISABLE, PRESCALING_CLK1024};
    173c:	fe 01       	movw	r30, r28
    173e:	eb 5a       	subi	r30, 0xAB	; 171
    1740:	ff 4f       	sbci	r31, 0xFF	; 255
    1742:	88 e0       	ldi	r24, 0x08	; 8
    1744:	80 83       	st	Z, r24
    1746:	fe 01       	movw	r30, r28
    1748:	eb 5a       	subi	r30, 0xAB	; 171
    174a:	ff 4f       	sbci	r31, 0xFF	; 255
    174c:	82 e0       	ldi	r24, 0x02	; 2
    174e:	81 83       	std	Z+1, r24	; 0x01
    1750:	fe 01       	movw	r30, r28
    1752:	eb 5a       	subi	r30, 0xAB	; 171
    1754:	ff 4f       	sbci	r31, 0xFF	; 255
    1756:	12 82       	std	Z+2, r1	; 0x02
    1758:	fe 01       	movw	r30, r28
    175a:	eb 5a       	subi	r30, 0xAB	; 171
    175c:	ff 4f       	sbci	r31, 0xFF	; 255
    175e:	85 e0       	ldi	r24, 0x05	; 5
    1760:	83 83       	std	Z+3, r24	; 0x03
	TIMER0_Init(&config);
    1762:	ce 01       	movw	r24, r28
    1764:	8b 5a       	subi	r24, 0xAB	; 171
    1766:	9f 4f       	sbci	r25, 0xFF	; 255
    1768:	0e 94 a3 05 	call	0xb46	; 0xb46 <TIMER0_Init>
	TIMER0_CALLBACK_CompareMatch_INTERRUPT(OCIE_Callback);
    176c:	88 e4       	ldi	r24, 0x48	; 72
    176e:	9b e0       	ldi	r25, 0x0B	; 11
    1770:	0e 94 bc 06 	call	0xd78	; 0xd78 <TIMER0_CALLBACK_CompareMatch_INTERRUPT>
	TIMER0_SetCounterValue(0);  /* initiate timer counter */
    1774:	80 e0       	ldi	r24, 0x00	; 0
    1776:	0e 94 84 06 	call	0xd08	; 0xd08 <TIMER0_SetCounterValue>
	TIMER0_SetCompareValue(250); /* put compare value in OCR0=250 */
    177a:	8a ef       	ldi	r24, 0xFA	; 250
    177c:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <TIMER0_SetCompareValue>
	INT0_Init();
    1780:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <INT0_Init>
	INT1_Init();
    1784:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <INT1_Init>
	INT2_Init();
    1788:	0e 94 25 0b 	call	0x164a	; 0x164a <INT2_Init>

	while (1)
	{
		if(count_second_flag == 1)
    178c:	80 91 73 00 	lds	r24, 0x0073
    1790:	81 30       	cpi	r24, 0x01	; 1
    1792:	21 f5       	brne	.+72     	; 0x17dc <main+0x122>
		{
			//enter here every one second
			//increment seconds count
			seconds_count++;
    1794:	80 91 70 00 	lds	r24, 0x0070
    1798:	8f 5f       	subi	r24, 0xFF	; 255
    179a:	80 93 70 00 	sts	0x0070, r24
			if(seconds_count == 60)
    179e:	80 91 70 00 	lds	r24, 0x0070
    17a2:	8c 33       	cpi	r24, 0x3C	; 60
    17a4:	39 f4       	brne	.+14     	; 0x17b4 <main+0xfa>
			{
				seconds_count = 0;
    17a6:	10 92 70 00 	sts	0x0070, r1
				minutes_count++;
    17aa:	80 91 74 00 	lds	r24, 0x0074
    17ae:	8f 5f       	subi	r24, 0xFF	; 255
    17b0:	80 93 74 00 	sts	0x0074, r24
			}
			if(minutes_count == 60)
    17b4:	80 91 74 00 	lds	r24, 0x0074
    17b8:	8c 33       	cpi	r24, 0x3C	; 60
    17ba:	39 f4       	brne	.+14     	; 0x17ca <main+0x110>
			{
				minutes_count = 0;
    17bc:	10 92 74 00 	sts	0x0074, r1
				hours_count++;
    17c0:	80 91 71 00 	lds	r24, 0x0071
    17c4:	8f 5f       	subi	r24, 0xFF	; 255
    17c6:	80 93 71 00 	sts	0x0071, r24
			}
			if(hours_count == 24)
    17ca:	80 91 71 00 	lds	r24, 0x0071
    17ce:	88 31       	cpi	r24, 0x18	; 24
    17d0:	11 f4       	brne	.+4      	; 0x17d6 <main+0x11c>
			{
				hours_count = 0;
    17d2:	10 92 71 00 	sts	0x0071, r1
			}
			// reset the flag again
			count_second_flag = 0;
    17d6:	10 92 73 00 	sts	0x0073, r1
    17da:	d8 cf       	rjmp	.-80     	; 0x178c <main+0xd2>
		}
		else
		{
			// out the number of seconds
			PORTA = (PORTA & 0xC0) | 0x01;
    17dc:	ab e3       	ldi	r26, 0x3B	; 59
    17de:	b0 e0       	ldi	r27, 0x00	; 0
    17e0:	eb e3       	ldi	r30, 0x3B	; 59
    17e2:	f0 e0       	ldi	r31, 0x00	; 0
    17e4:	80 81       	ld	r24, Z
    17e6:	80 7c       	andi	r24, 0xC0	; 192
    17e8:	81 60       	ori	r24, 0x01	; 1
    17ea:	8c 93       	st	X, r24
			PORTC = (PORTC & 0xF0) | (seconds_count%10);
    17ec:	a5 e3       	ldi	r26, 0x35	; 53
    17ee:	b0 e0       	ldi	r27, 0x00	; 0
    17f0:	e5 e3       	ldi	r30, 0x35	; 53
    17f2:	f0 e0       	ldi	r31, 0x00	; 0
    17f4:	80 81       	ld	r24, Z
    17f6:	28 2f       	mov	r18, r24
    17f8:	20 7f       	andi	r18, 0xF0	; 240
    17fa:	80 91 70 00 	lds	r24, 0x0070
    17fe:	9a e0       	ldi	r25, 0x0A	; 10
    1800:	69 2f       	mov	r22, r25
    1802:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <__udivmodqi4>
    1806:	89 2f       	mov	r24, r25
    1808:	82 2b       	or	r24, r18
    180a:	8c 93       	st	X, r24
    180c:	fe 01       	movw	r30, r28
    180e:	ef 5a       	subi	r30, 0xAF	; 175
    1810:	ff 4f       	sbci	r31, 0xFF	; 255
    1812:	80 e0       	ldi	r24, 0x00	; 0
    1814:	90 e0       	ldi	r25, 0x00	; 0
    1816:	a0 e0       	ldi	r26, 0x00	; 0
    1818:	b0 e4       	ldi	r27, 0x40	; 64
    181a:	80 83       	st	Z, r24
    181c:	91 83       	std	Z+1, r25	; 0x01
    181e:	a2 83       	std	Z+2, r26	; 0x02
    1820:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1822:	8e 01       	movw	r16, r28
    1824:	03 5b       	subi	r16, 0xB3	; 179
    1826:	1f 4f       	sbci	r17, 0xFF	; 255
    1828:	fe 01       	movw	r30, r28
    182a:	ef 5a       	subi	r30, 0xAF	; 175
    182c:	ff 4f       	sbci	r31, 0xFF	; 255
    182e:	60 81       	ld	r22, Z
    1830:	71 81       	ldd	r23, Z+1	; 0x01
    1832:	82 81       	ldd	r24, Z+2	; 0x02
    1834:	93 81       	ldd	r25, Z+3	; 0x03
    1836:	20 e0       	ldi	r18, 0x00	; 0
    1838:	30 e0       	ldi	r19, 0x00	; 0
    183a:	4a e7       	ldi	r20, 0x7A	; 122
    183c:	53 e4       	ldi	r21, 0x43	; 67
    183e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1842:	dc 01       	movw	r26, r24
    1844:	cb 01       	movw	r24, r22
    1846:	f8 01       	movw	r30, r16
    1848:	80 83       	st	Z, r24
    184a:	91 83       	std	Z+1, r25	; 0x01
    184c:	a2 83       	std	Z+2, r26	; 0x02
    184e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1850:	fe 01       	movw	r30, r28
    1852:	e3 5b       	subi	r30, 0xB3	; 179
    1854:	ff 4f       	sbci	r31, 0xFF	; 255
    1856:	60 81       	ld	r22, Z
    1858:	71 81       	ldd	r23, Z+1	; 0x01
    185a:	82 81       	ldd	r24, Z+2	; 0x02
    185c:	93 81       	ldd	r25, Z+3	; 0x03
    185e:	20 e0       	ldi	r18, 0x00	; 0
    1860:	30 e0       	ldi	r19, 0x00	; 0
    1862:	40 e8       	ldi	r20, 0x80	; 128
    1864:	5f e3       	ldi	r21, 0x3F	; 63
    1866:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    186a:	88 23       	and	r24, r24
    186c:	44 f4       	brge	.+16     	; 0x187e <main+0x1c4>
		__ticks = 1;
    186e:	fe 01       	movw	r30, r28
    1870:	e5 5b       	subi	r30, 0xB5	; 181
    1872:	ff 4f       	sbci	r31, 0xFF	; 255
    1874:	81 e0       	ldi	r24, 0x01	; 1
    1876:	90 e0       	ldi	r25, 0x00	; 0
    1878:	91 83       	std	Z+1, r25	; 0x01
    187a:	80 83       	st	Z, r24
    187c:	64 c0       	rjmp	.+200    	; 0x1946 <main+0x28c>
	else if (__tmp > 65535)
    187e:	fe 01       	movw	r30, r28
    1880:	e3 5b       	subi	r30, 0xB3	; 179
    1882:	ff 4f       	sbci	r31, 0xFF	; 255
    1884:	60 81       	ld	r22, Z
    1886:	71 81       	ldd	r23, Z+1	; 0x01
    1888:	82 81       	ldd	r24, Z+2	; 0x02
    188a:	93 81       	ldd	r25, Z+3	; 0x03
    188c:	20 e0       	ldi	r18, 0x00	; 0
    188e:	3f ef       	ldi	r19, 0xFF	; 255
    1890:	4f e7       	ldi	r20, 0x7F	; 127
    1892:	57 e4       	ldi	r21, 0x47	; 71
    1894:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1898:	18 16       	cp	r1, r24
    189a:	0c f0       	brlt	.+2      	; 0x189e <main+0x1e4>
    189c:	43 c0       	rjmp	.+134    	; 0x1924 <main+0x26a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    189e:	fe 01       	movw	r30, r28
    18a0:	ef 5a       	subi	r30, 0xAF	; 175
    18a2:	ff 4f       	sbci	r31, 0xFF	; 255
    18a4:	60 81       	ld	r22, Z
    18a6:	71 81       	ldd	r23, Z+1	; 0x01
    18a8:	82 81       	ldd	r24, Z+2	; 0x02
    18aa:	93 81       	ldd	r25, Z+3	; 0x03
    18ac:	20 e0       	ldi	r18, 0x00	; 0
    18ae:	30 e0       	ldi	r19, 0x00	; 0
    18b0:	40 e2       	ldi	r20, 0x20	; 32
    18b2:	51 e4       	ldi	r21, 0x41	; 65
    18b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18b8:	dc 01       	movw	r26, r24
    18ba:	cb 01       	movw	r24, r22
    18bc:	8e 01       	movw	r16, r28
    18be:	05 5b       	subi	r16, 0xB5	; 181
    18c0:	1f 4f       	sbci	r17, 0xFF	; 255
    18c2:	bc 01       	movw	r22, r24
    18c4:	cd 01       	movw	r24, r26
    18c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18ca:	dc 01       	movw	r26, r24
    18cc:	cb 01       	movw	r24, r22
    18ce:	f8 01       	movw	r30, r16
    18d0:	91 83       	std	Z+1, r25	; 0x01
    18d2:	80 83       	st	Z, r24
    18d4:	1f c0       	rjmp	.+62     	; 0x1914 <main+0x25a>
    18d6:	fe 01       	movw	r30, r28
    18d8:	e7 5b       	subi	r30, 0xB7	; 183
    18da:	ff 4f       	sbci	r31, 0xFF	; 255
    18dc:	89 e1       	ldi	r24, 0x19	; 25
    18de:	90 e0       	ldi	r25, 0x00	; 0
    18e0:	91 83       	std	Z+1, r25	; 0x01
    18e2:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    18e4:	fe 01       	movw	r30, r28
    18e6:	e7 5b       	subi	r30, 0xB7	; 183
    18e8:	ff 4f       	sbci	r31, 0xFF	; 255
    18ea:	80 81       	ld	r24, Z
    18ec:	91 81       	ldd	r25, Z+1	; 0x01
    18ee:	01 97       	sbiw	r24, 0x01	; 1
    18f0:	f1 f7       	brne	.-4      	; 0x18ee <main+0x234>
    18f2:	fe 01       	movw	r30, r28
    18f4:	e7 5b       	subi	r30, 0xB7	; 183
    18f6:	ff 4f       	sbci	r31, 0xFF	; 255
    18f8:	91 83       	std	Z+1, r25	; 0x01
    18fa:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18fc:	de 01       	movw	r26, r28
    18fe:	a5 5b       	subi	r26, 0xB5	; 181
    1900:	bf 4f       	sbci	r27, 0xFF	; 255
    1902:	fe 01       	movw	r30, r28
    1904:	e5 5b       	subi	r30, 0xB5	; 181
    1906:	ff 4f       	sbci	r31, 0xFF	; 255
    1908:	80 81       	ld	r24, Z
    190a:	91 81       	ldd	r25, Z+1	; 0x01
    190c:	01 97       	sbiw	r24, 0x01	; 1
    190e:	11 96       	adiw	r26, 0x01	; 1
    1910:	9c 93       	st	X, r25
    1912:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1914:	fe 01       	movw	r30, r28
    1916:	e5 5b       	subi	r30, 0xB5	; 181
    1918:	ff 4f       	sbci	r31, 0xFF	; 255
    191a:	80 81       	ld	r24, Z
    191c:	91 81       	ldd	r25, Z+1	; 0x01
    191e:	00 97       	sbiw	r24, 0x00	; 0
    1920:	d1 f6       	brne	.-76     	; 0x18d6 <main+0x21c>
    1922:	27 c0       	rjmp	.+78     	; 0x1972 <main+0x2b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1924:	8e 01       	movw	r16, r28
    1926:	05 5b       	subi	r16, 0xB5	; 181
    1928:	1f 4f       	sbci	r17, 0xFF	; 255
    192a:	fe 01       	movw	r30, r28
    192c:	e3 5b       	subi	r30, 0xB3	; 179
    192e:	ff 4f       	sbci	r31, 0xFF	; 255
    1930:	60 81       	ld	r22, Z
    1932:	71 81       	ldd	r23, Z+1	; 0x01
    1934:	82 81       	ldd	r24, Z+2	; 0x02
    1936:	93 81       	ldd	r25, Z+3	; 0x03
    1938:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    193c:	dc 01       	movw	r26, r24
    193e:	cb 01       	movw	r24, r22
    1940:	f8 01       	movw	r30, r16
    1942:	91 83       	std	Z+1, r25	; 0x01
    1944:	80 83       	st	Z, r24
    1946:	de 01       	movw	r26, r28
    1948:	a9 5b       	subi	r26, 0xB9	; 185
    194a:	bf 4f       	sbci	r27, 0xFF	; 255
    194c:	fe 01       	movw	r30, r28
    194e:	e5 5b       	subi	r30, 0xB5	; 181
    1950:	ff 4f       	sbci	r31, 0xFF	; 255
    1952:	80 81       	ld	r24, Z
    1954:	91 81       	ldd	r25, Z+1	; 0x01
    1956:	8d 93       	st	X+, r24
    1958:	9c 93       	st	X, r25
    195a:	fe 01       	movw	r30, r28
    195c:	e9 5b       	subi	r30, 0xB9	; 185
    195e:	ff 4f       	sbci	r31, 0xFF	; 255
    1960:	80 81       	ld	r24, Z
    1962:	91 81       	ldd	r25, Z+1	; 0x01
    1964:	01 97       	sbiw	r24, 0x01	; 1
    1966:	f1 f7       	brne	.-4      	; 0x1964 <main+0x2aa>
    1968:	fe 01       	movw	r30, r28
    196a:	e9 5b       	subi	r30, 0xB9	; 185
    196c:	ff 4f       	sbci	r31, 0xFF	; 255
    196e:	91 83       	std	Z+1, r25	; 0x01
    1970:	80 83       	st	Z, r24

			// make small delay to see the changes in the 7-segment
			// 2Miliseconds delay will not effect the seconds count
			_delay_ms(2);

			PORTA = (PORTA & 0xC0) | 0x02;
    1972:	ab e3       	ldi	r26, 0x3B	; 59
    1974:	b0 e0       	ldi	r27, 0x00	; 0
    1976:	eb e3       	ldi	r30, 0x3B	; 59
    1978:	f0 e0       	ldi	r31, 0x00	; 0
    197a:	80 81       	ld	r24, Z
    197c:	80 7c       	andi	r24, 0xC0	; 192
    197e:	82 60       	ori	r24, 0x02	; 2
    1980:	8c 93       	st	X, r24
			PORTC = (PORTC & 0xF0) | (seconds_count/10);
    1982:	a5 e3       	ldi	r26, 0x35	; 53
    1984:	b0 e0       	ldi	r27, 0x00	; 0
    1986:	e5 e3       	ldi	r30, 0x35	; 53
    1988:	f0 e0       	ldi	r31, 0x00	; 0
    198a:	80 81       	ld	r24, Z
    198c:	28 2f       	mov	r18, r24
    198e:	20 7f       	andi	r18, 0xF0	; 240
    1990:	80 91 70 00 	lds	r24, 0x0070
    1994:	9a e0       	ldi	r25, 0x0A	; 10
    1996:	69 2f       	mov	r22, r25
    1998:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <__udivmodqi4>
    199c:	82 2b       	or	r24, r18
    199e:	8c 93       	st	X, r24
    19a0:	fe 01       	movw	r30, r28
    19a2:	ed 5b       	subi	r30, 0xBD	; 189
    19a4:	ff 4f       	sbci	r31, 0xFF	; 255
    19a6:	80 e0       	ldi	r24, 0x00	; 0
    19a8:	90 e0       	ldi	r25, 0x00	; 0
    19aa:	a0 e0       	ldi	r26, 0x00	; 0
    19ac:	b0 e4       	ldi	r27, 0x40	; 64
    19ae:	80 83       	st	Z, r24
    19b0:	91 83       	std	Z+1, r25	; 0x01
    19b2:	a2 83       	std	Z+2, r26	; 0x02
    19b4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19b6:	8e 01       	movw	r16, r28
    19b8:	01 5c       	subi	r16, 0xC1	; 193
    19ba:	1f 4f       	sbci	r17, 0xFF	; 255
    19bc:	fe 01       	movw	r30, r28
    19be:	ed 5b       	subi	r30, 0xBD	; 189
    19c0:	ff 4f       	sbci	r31, 0xFF	; 255
    19c2:	60 81       	ld	r22, Z
    19c4:	71 81       	ldd	r23, Z+1	; 0x01
    19c6:	82 81       	ldd	r24, Z+2	; 0x02
    19c8:	93 81       	ldd	r25, Z+3	; 0x03
    19ca:	20 e0       	ldi	r18, 0x00	; 0
    19cc:	30 e0       	ldi	r19, 0x00	; 0
    19ce:	4a e7       	ldi	r20, 0x7A	; 122
    19d0:	53 e4       	ldi	r21, 0x43	; 67
    19d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19d6:	dc 01       	movw	r26, r24
    19d8:	cb 01       	movw	r24, r22
    19da:	f8 01       	movw	r30, r16
    19dc:	80 83       	st	Z, r24
    19de:	91 83       	std	Z+1, r25	; 0x01
    19e0:	a2 83       	std	Z+2, r26	; 0x02
    19e2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    19e4:	fe 01       	movw	r30, r28
    19e6:	ff 96       	adiw	r30, 0x3f	; 63
    19e8:	60 81       	ld	r22, Z
    19ea:	71 81       	ldd	r23, Z+1	; 0x01
    19ec:	82 81       	ldd	r24, Z+2	; 0x02
    19ee:	93 81       	ldd	r25, Z+3	; 0x03
    19f0:	20 e0       	ldi	r18, 0x00	; 0
    19f2:	30 e0       	ldi	r19, 0x00	; 0
    19f4:	40 e8       	ldi	r20, 0x80	; 128
    19f6:	5f e3       	ldi	r21, 0x3F	; 63
    19f8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19fc:	88 23       	and	r24, r24
    19fe:	2c f4       	brge	.+10     	; 0x1a0a <main+0x350>
		__ticks = 1;
    1a00:	81 e0       	ldi	r24, 0x01	; 1
    1a02:	90 e0       	ldi	r25, 0x00	; 0
    1a04:	9e af       	std	Y+62, r25	; 0x3e
    1a06:	8d af       	std	Y+61, r24	; 0x3d
    1a08:	46 c0       	rjmp	.+140    	; 0x1a96 <main+0x3dc>
	else if (__tmp > 65535)
    1a0a:	fe 01       	movw	r30, r28
    1a0c:	ff 96       	adiw	r30, 0x3f	; 63
    1a0e:	60 81       	ld	r22, Z
    1a10:	71 81       	ldd	r23, Z+1	; 0x01
    1a12:	82 81       	ldd	r24, Z+2	; 0x02
    1a14:	93 81       	ldd	r25, Z+3	; 0x03
    1a16:	20 e0       	ldi	r18, 0x00	; 0
    1a18:	3f ef       	ldi	r19, 0xFF	; 255
    1a1a:	4f e7       	ldi	r20, 0x7F	; 127
    1a1c:	57 e4       	ldi	r21, 0x47	; 71
    1a1e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a22:	18 16       	cp	r1, r24
    1a24:	64 f5       	brge	.+88     	; 0x1a7e <main+0x3c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a26:	fe 01       	movw	r30, r28
    1a28:	ed 5b       	subi	r30, 0xBD	; 189
    1a2a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a2c:	60 81       	ld	r22, Z
    1a2e:	71 81       	ldd	r23, Z+1	; 0x01
    1a30:	82 81       	ldd	r24, Z+2	; 0x02
    1a32:	93 81       	ldd	r25, Z+3	; 0x03
    1a34:	20 e0       	ldi	r18, 0x00	; 0
    1a36:	30 e0       	ldi	r19, 0x00	; 0
    1a38:	40 e2       	ldi	r20, 0x20	; 32
    1a3a:	51 e4       	ldi	r21, 0x41	; 65
    1a3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a40:	dc 01       	movw	r26, r24
    1a42:	cb 01       	movw	r24, r22
    1a44:	bc 01       	movw	r22, r24
    1a46:	cd 01       	movw	r24, r26
    1a48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a4c:	dc 01       	movw	r26, r24
    1a4e:	cb 01       	movw	r24, r22
    1a50:	9e af       	std	Y+62, r25	; 0x3e
    1a52:	8d af       	std	Y+61, r24	; 0x3d
    1a54:	0f c0       	rjmp	.+30     	; 0x1a74 <main+0x3ba>
    1a56:	89 e1       	ldi	r24, 0x19	; 25
    1a58:	90 e0       	ldi	r25, 0x00	; 0
    1a5a:	9c af       	std	Y+60, r25	; 0x3c
    1a5c:	8b af       	std	Y+59, r24	; 0x3b
    1a5e:	8b ad       	ldd	r24, Y+59	; 0x3b
    1a60:	9c ad       	ldd	r25, Y+60	; 0x3c
    1a62:	01 97       	sbiw	r24, 0x01	; 1
    1a64:	f1 f7       	brne	.-4      	; 0x1a62 <main+0x3a8>
    1a66:	9c af       	std	Y+60, r25	; 0x3c
    1a68:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a6a:	8d ad       	ldd	r24, Y+61	; 0x3d
    1a6c:	9e ad       	ldd	r25, Y+62	; 0x3e
    1a6e:	01 97       	sbiw	r24, 0x01	; 1
    1a70:	9e af       	std	Y+62, r25	; 0x3e
    1a72:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a74:	8d ad       	ldd	r24, Y+61	; 0x3d
    1a76:	9e ad       	ldd	r25, Y+62	; 0x3e
    1a78:	00 97       	sbiw	r24, 0x00	; 0
    1a7a:	69 f7       	brne	.-38     	; 0x1a56 <main+0x39c>
    1a7c:	16 c0       	rjmp	.+44     	; 0x1aaa <main+0x3f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a7e:	fe 01       	movw	r30, r28
    1a80:	ff 96       	adiw	r30, 0x3f	; 63
    1a82:	60 81       	ld	r22, Z
    1a84:	71 81       	ldd	r23, Z+1	; 0x01
    1a86:	82 81       	ldd	r24, Z+2	; 0x02
    1a88:	93 81       	ldd	r25, Z+3	; 0x03
    1a8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a8e:	dc 01       	movw	r26, r24
    1a90:	cb 01       	movw	r24, r22
    1a92:	9e af       	std	Y+62, r25	; 0x3e
    1a94:	8d af       	std	Y+61, r24	; 0x3d
    1a96:	8d ad       	ldd	r24, Y+61	; 0x3d
    1a98:	9e ad       	ldd	r25, Y+62	; 0x3e
    1a9a:	9a af       	std	Y+58, r25	; 0x3a
    1a9c:	89 af       	std	Y+57, r24	; 0x39
    1a9e:	89 ad       	ldd	r24, Y+57	; 0x39
    1aa0:	9a ad       	ldd	r25, Y+58	; 0x3a
    1aa2:	01 97       	sbiw	r24, 0x01	; 1
    1aa4:	f1 f7       	brne	.-4      	; 0x1aa2 <main+0x3e8>
    1aa6:	9a af       	std	Y+58, r25	; 0x3a
    1aa8:	89 af       	std	Y+57, r24	; 0x39

			_delay_ms(2);

			// out the number of minutes
			PORTA = (PORTA & 0xC0) | 0x04;
    1aaa:	ab e3       	ldi	r26, 0x3B	; 59
    1aac:	b0 e0       	ldi	r27, 0x00	; 0
    1aae:	eb e3       	ldi	r30, 0x3B	; 59
    1ab0:	f0 e0       	ldi	r31, 0x00	; 0
    1ab2:	80 81       	ld	r24, Z
    1ab4:	80 7c       	andi	r24, 0xC0	; 192
    1ab6:	84 60       	ori	r24, 0x04	; 4
    1ab8:	8c 93       	st	X, r24
			PORTC = (PORTC & 0xF0) | (minutes_count%10);
    1aba:	a5 e3       	ldi	r26, 0x35	; 53
    1abc:	b0 e0       	ldi	r27, 0x00	; 0
    1abe:	e5 e3       	ldi	r30, 0x35	; 53
    1ac0:	f0 e0       	ldi	r31, 0x00	; 0
    1ac2:	80 81       	ld	r24, Z
    1ac4:	28 2f       	mov	r18, r24
    1ac6:	20 7f       	andi	r18, 0xF0	; 240
    1ac8:	80 91 74 00 	lds	r24, 0x0074
    1acc:	9a e0       	ldi	r25, 0x0A	; 10
    1ace:	69 2f       	mov	r22, r25
    1ad0:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <__udivmodqi4>
    1ad4:	89 2f       	mov	r24, r25
    1ad6:	82 2b       	or	r24, r18
    1ad8:	8c 93       	st	X, r24
    1ada:	80 e0       	ldi	r24, 0x00	; 0
    1adc:	90 e0       	ldi	r25, 0x00	; 0
    1ade:	a0 e0       	ldi	r26, 0x00	; 0
    1ae0:	b0 e4       	ldi	r27, 0x40	; 64
    1ae2:	8d ab       	std	Y+53, r24	; 0x35
    1ae4:	9e ab       	std	Y+54, r25	; 0x36
    1ae6:	af ab       	std	Y+55, r26	; 0x37
    1ae8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1aea:	6d a9       	ldd	r22, Y+53	; 0x35
    1aec:	7e a9       	ldd	r23, Y+54	; 0x36
    1aee:	8f a9       	ldd	r24, Y+55	; 0x37
    1af0:	98 ad       	ldd	r25, Y+56	; 0x38
    1af2:	20 e0       	ldi	r18, 0x00	; 0
    1af4:	30 e0       	ldi	r19, 0x00	; 0
    1af6:	4a e7       	ldi	r20, 0x7A	; 122
    1af8:	53 e4       	ldi	r21, 0x43	; 67
    1afa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1afe:	dc 01       	movw	r26, r24
    1b00:	cb 01       	movw	r24, r22
    1b02:	89 ab       	std	Y+49, r24	; 0x31
    1b04:	9a ab       	std	Y+50, r25	; 0x32
    1b06:	ab ab       	std	Y+51, r26	; 0x33
    1b08:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1b0a:	69 a9       	ldd	r22, Y+49	; 0x31
    1b0c:	7a a9       	ldd	r23, Y+50	; 0x32
    1b0e:	8b a9       	ldd	r24, Y+51	; 0x33
    1b10:	9c a9       	ldd	r25, Y+52	; 0x34
    1b12:	20 e0       	ldi	r18, 0x00	; 0
    1b14:	30 e0       	ldi	r19, 0x00	; 0
    1b16:	40 e8       	ldi	r20, 0x80	; 128
    1b18:	5f e3       	ldi	r21, 0x3F	; 63
    1b1a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b1e:	88 23       	and	r24, r24
    1b20:	2c f4       	brge	.+10     	; 0x1b2c <main+0x472>
		__ticks = 1;
    1b22:	81 e0       	ldi	r24, 0x01	; 1
    1b24:	90 e0       	ldi	r25, 0x00	; 0
    1b26:	98 ab       	std	Y+48, r25	; 0x30
    1b28:	8f a7       	std	Y+47, r24	; 0x2f
    1b2a:	3f c0       	rjmp	.+126    	; 0x1baa <main+0x4f0>
	else if (__tmp > 65535)
    1b2c:	69 a9       	ldd	r22, Y+49	; 0x31
    1b2e:	7a a9       	ldd	r23, Y+50	; 0x32
    1b30:	8b a9       	ldd	r24, Y+51	; 0x33
    1b32:	9c a9       	ldd	r25, Y+52	; 0x34
    1b34:	20 e0       	ldi	r18, 0x00	; 0
    1b36:	3f ef       	ldi	r19, 0xFF	; 255
    1b38:	4f e7       	ldi	r20, 0x7F	; 127
    1b3a:	57 e4       	ldi	r21, 0x47	; 71
    1b3c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b40:	18 16       	cp	r1, r24
    1b42:	4c f5       	brge	.+82     	; 0x1b96 <main+0x4dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b44:	6d a9       	ldd	r22, Y+53	; 0x35
    1b46:	7e a9       	ldd	r23, Y+54	; 0x36
    1b48:	8f a9       	ldd	r24, Y+55	; 0x37
    1b4a:	98 ad       	ldd	r25, Y+56	; 0x38
    1b4c:	20 e0       	ldi	r18, 0x00	; 0
    1b4e:	30 e0       	ldi	r19, 0x00	; 0
    1b50:	40 e2       	ldi	r20, 0x20	; 32
    1b52:	51 e4       	ldi	r21, 0x41	; 65
    1b54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b58:	dc 01       	movw	r26, r24
    1b5a:	cb 01       	movw	r24, r22
    1b5c:	bc 01       	movw	r22, r24
    1b5e:	cd 01       	movw	r24, r26
    1b60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b64:	dc 01       	movw	r26, r24
    1b66:	cb 01       	movw	r24, r22
    1b68:	98 ab       	std	Y+48, r25	; 0x30
    1b6a:	8f a7       	std	Y+47, r24	; 0x2f
    1b6c:	0f c0       	rjmp	.+30     	; 0x1b8c <main+0x4d2>
    1b6e:	89 e1       	ldi	r24, 0x19	; 25
    1b70:	90 e0       	ldi	r25, 0x00	; 0
    1b72:	9e a7       	std	Y+46, r25	; 0x2e
    1b74:	8d a7       	std	Y+45, r24	; 0x2d
    1b76:	8d a5       	ldd	r24, Y+45	; 0x2d
    1b78:	9e a5       	ldd	r25, Y+46	; 0x2e
    1b7a:	01 97       	sbiw	r24, 0x01	; 1
    1b7c:	f1 f7       	brne	.-4      	; 0x1b7a <main+0x4c0>
    1b7e:	9e a7       	std	Y+46, r25	; 0x2e
    1b80:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b82:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b84:	98 a9       	ldd	r25, Y+48	; 0x30
    1b86:	01 97       	sbiw	r24, 0x01	; 1
    1b88:	98 ab       	std	Y+48, r25	; 0x30
    1b8a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b8c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b8e:	98 a9       	ldd	r25, Y+48	; 0x30
    1b90:	00 97       	sbiw	r24, 0x00	; 0
    1b92:	69 f7       	brne	.-38     	; 0x1b6e <main+0x4b4>
    1b94:	14 c0       	rjmp	.+40     	; 0x1bbe <main+0x504>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b96:	69 a9       	ldd	r22, Y+49	; 0x31
    1b98:	7a a9       	ldd	r23, Y+50	; 0x32
    1b9a:	8b a9       	ldd	r24, Y+51	; 0x33
    1b9c:	9c a9       	ldd	r25, Y+52	; 0x34
    1b9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ba2:	dc 01       	movw	r26, r24
    1ba4:	cb 01       	movw	r24, r22
    1ba6:	98 ab       	std	Y+48, r25	; 0x30
    1ba8:	8f a7       	std	Y+47, r24	; 0x2f
    1baa:	8f a5       	ldd	r24, Y+47	; 0x2f
    1bac:	98 a9       	ldd	r25, Y+48	; 0x30
    1bae:	9c a7       	std	Y+44, r25	; 0x2c
    1bb0:	8b a7       	std	Y+43, r24	; 0x2b
    1bb2:	8b a5       	ldd	r24, Y+43	; 0x2b
    1bb4:	9c a5       	ldd	r25, Y+44	; 0x2c
    1bb6:	01 97       	sbiw	r24, 0x01	; 1
    1bb8:	f1 f7       	brne	.-4      	; 0x1bb6 <main+0x4fc>
    1bba:	9c a7       	std	Y+44, r25	; 0x2c
    1bbc:	8b a7       	std	Y+43, r24	; 0x2b

			_delay_ms(2);

			PORTA = (PORTA & 0xC0) | 0x08;
    1bbe:	ab e3       	ldi	r26, 0x3B	; 59
    1bc0:	b0 e0       	ldi	r27, 0x00	; 0
    1bc2:	eb e3       	ldi	r30, 0x3B	; 59
    1bc4:	f0 e0       	ldi	r31, 0x00	; 0
    1bc6:	80 81       	ld	r24, Z
    1bc8:	80 7c       	andi	r24, 0xC0	; 192
    1bca:	88 60       	ori	r24, 0x08	; 8
    1bcc:	8c 93       	st	X, r24
			PORTC = (PORTC & 0xF0) | (minutes_count/10);
    1bce:	a5 e3       	ldi	r26, 0x35	; 53
    1bd0:	b0 e0       	ldi	r27, 0x00	; 0
    1bd2:	e5 e3       	ldi	r30, 0x35	; 53
    1bd4:	f0 e0       	ldi	r31, 0x00	; 0
    1bd6:	80 81       	ld	r24, Z
    1bd8:	28 2f       	mov	r18, r24
    1bda:	20 7f       	andi	r18, 0xF0	; 240
    1bdc:	80 91 74 00 	lds	r24, 0x0074
    1be0:	9a e0       	ldi	r25, 0x0A	; 10
    1be2:	69 2f       	mov	r22, r25
    1be4:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <__udivmodqi4>
    1be8:	82 2b       	or	r24, r18
    1bea:	8c 93       	st	X, r24
    1bec:	80 e0       	ldi	r24, 0x00	; 0
    1bee:	90 e0       	ldi	r25, 0x00	; 0
    1bf0:	a0 e0       	ldi	r26, 0x00	; 0
    1bf2:	b0 e4       	ldi	r27, 0x40	; 64
    1bf4:	8f a3       	std	Y+39, r24	; 0x27
    1bf6:	98 a7       	std	Y+40, r25	; 0x28
    1bf8:	a9 a7       	std	Y+41, r26	; 0x29
    1bfa:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bfc:	6f a1       	ldd	r22, Y+39	; 0x27
    1bfe:	78 a5       	ldd	r23, Y+40	; 0x28
    1c00:	89 a5       	ldd	r24, Y+41	; 0x29
    1c02:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c04:	20 e0       	ldi	r18, 0x00	; 0
    1c06:	30 e0       	ldi	r19, 0x00	; 0
    1c08:	4a e7       	ldi	r20, 0x7A	; 122
    1c0a:	53 e4       	ldi	r21, 0x43	; 67
    1c0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c10:	dc 01       	movw	r26, r24
    1c12:	cb 01       	movw	r24, r22
    1c14:	8b a3       	std	Y+35, r24	; 0x23
    1c16:	9c a3       	std	Y+36, r25	; 0x24
    1c18:	ad a3       	std	Y+37, r26	; 0x25
    1c1a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1c1c:	6b a1       	ldd	r22, Y+35	; 0x23
    1c1e:	7c a1       	ldd	r23, Y+36	; 0x24
    1c20:	8d a1       	ldd	r24, Y+37	; 0x25
    1c22:	9e a1       	ldd	r25, Y+38	; 0x26
    1c24:	20 e0       	ldi	r18, 0x00	; 0
    1c26:	30 e0       	ldi	r19, 0x00	; 0
    1c28:	40 e8       	ldi	r20, 0x80	; 128
    1c2a:	5f e3       	ldi	r21, 0x3F	; 63
    1c2c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c30:	88 23       	and	r24, r24
    1c32:	2c f4       	brge	.+10     	; 0x1c3e <main+0x584>
		__ticks = 1;
    1c34:	81 e0       	ldi	r24, 0x01	; 1
    1c36:	90 e0       	ldi	r25, 0x00	; 0
    1c38:	9a a3       	std	Y+34, r25	; 0x22
    1c3a:	89 a3       	std	Y+33, r24	; 0x21
    1c3c:	3f c0       	rjmp	.+126    	; 0x1cbc <main+0x602>
	else if (__tmp > 65535)
    1c3e:	6b a1       	ldd	r22, Y+35	; 0x23
    1c40:	7c a1       	ldd	r23, Y+36	; 0x24
    1c42:	8d a1       	ldd	r24, Y+37	; 0x25
    1c44:	9e a1       	ldd	r25, Y+38	; 0x26
    1c46:	20 e0       	ldi	r18, 0x00	; 0
    1c48:	3f ef       	ldi	r19, 0xFF	; 255
    1c4a:	4f e7       	ldi	r20, 0x7F	; 127
    1c4c:	57 e4       	ldi	r21, 0x47	; 71
    1c4e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c52:	18 16       	cp	r1, r24
    1c54:	4c f5       	brge	.+82     	; 0x1ca8 <main+0x5ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c56:	6f a1       	ldd	r22, Y+39	; 0x27
    1c58:	78 a5       	ldd	r23, Y+40	; 0x28
    1c5a:	89 a5       	ldd	r24, Y+41	; 0x29
    1c5c:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c5e:	20 e0       	ldi	r18, 0x00	; 0
    1c60:	30 e0       	ldi	r19, 0x00	; 0
    1c62:	40 e2       	ldi	r20, 0x20	; 32
    1c64:	51 e4       	ldi	r21, 0x41	; 65
    1c66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c6a:	dc 01       	movw	r26, r24
    1c6c:	cb 01       	movw	r24, r22
    1c6e:	bc 01       	movw	r22, r24
    1c70:	cd 01       	movw	r24, r26
    1c72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c76:	dc 01       	movw	r26, r24
    1c78:	cb 01       	movw	r24, r22
    1c7a:	9a a3       	std	Y+34, r25	; 0x22
    1c7c:	89 a3       	std	Y+33, r24	; 0x21
    1c7e:	0f c0       	rjmp	.+30     	; 0x1c9e <main+0x5e4>
    1c80:	89 e1       	ldi	r24, 0x19	; 25
    1c82:	90 e0       	ldi	r25, 0x00	; 0
    1c84:	98 a3       	std	Y+32, r25	; 0x20
    1c86:	8f 8f       	std	Y+31, r24	; 0x1f
    1c88:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1c8a:	98 a1       	ldd	r25, Y+32	; 0x20
    1c8c:	01 97       	sbiw	r24, 0x01	; 1
    1c8e:	f1 f7       	brne	.-4      	; 0x1c8c <main+0x5d2>
    1c90:	98 a3       	std	Y+32, r25	; 0x20
    1c92:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c94:	89 a1       	ldd	r24, Y+33	; 0x21
    1c96:	9a a1       	ldd	r25, Y+34	; 0x22
    1c98:	01 97       	sbiw	r24, 0x01	; 1
    1c9a:	9a a3       	std	Y+34, r25	; 0x22
    1c9c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c9e:	89 a1       	ldd	r24, Y+33	; 0x21
    1ca0:	9a a1       	ldd	r25, Y+34	; 0x22
    1ca2:	00 97       	sbiw	r24, 0x00	; 0
    1ca4:	69 f7       	brne	.-38     	; 0x1c80 <main+0x5c6>
    1ca6:	14 c0       	rjmp	.+40     	; 0x1cd0 <main+0x616>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ca8:	6b a1       	ldd	r22, Y+35	; 0x23
    1caa:	7c a1       	ldd	r23, Y+36	; 0x24
    1cac:	8d a1       	ldd	r24, Y+37	; 0x25
    1cae:	9e a1       	ldd	r25, Y+38	; 0x26
    1cb0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cb4:	dc 01       	movw	r26, r24
    1cb6:	cb 01       	movw	r24, r22
    1cb8:	9a a3       	std	Y+34, r25	; 0x22
    1cba:	89 a3       	std	Y+33, r24	; 0x21
    1cbc:	89 a1       	ldd	r24, Y+33	; 0x21
    1cbe:	9a a1       	ldd	r25, Y+34	; 0x22
    1cc0:	9e 8f       	std	Y+30, r25	; 0x1e
    1cc2:	8d 8f       	std	Y+29, r24	; 0x1d
    1cc4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1cc6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1cc8:	01 97       	sbiw	r24, 0x01	; 1
    1cca:	f1 f7       	brne	.-4      	; 0x1cc8 <main+0x60e>
    1ccc:	9e 8f       	std	Y+30, r25	; 0x1e
    1cce:	8d 8f       	std	Y+29, r24	; 0x1d

			_delay_ms(2);

			// out the number of hours
			PORTA = (PORTA & 0xC0) | 0x10;
    1cd0:	ab e3       	ldi	r26, 0x3B	; 59
    1cd2:	b0 e0       	ldi	r27, 0x00	; 0
    1cd4:	eb e3       	ldi	r30, 0x3B	; 59
    1cd6:	f0 e0       	ldi	r31, 0x00	; 0
    1cd8:	80 81       	ld	r24, Z
    1cda:	80 7c       	andi	r24, 0xC0	; 192
    1cdc:	80 61       	ori	r24, 0x10	; 16
    1cde:	8c 93       	st	X, r24
			PORTC = (PORTC & 0xF0) | (hours_count%10);
    1ce0:	a5 e3       	ldi	r26, 0x35	; 53
    1ce2:	b0 e0       	ldi	r27, 0x00	; 0
    1ce4:	e5 e3       	ldi	r30, 0x35	; 53
    1ce6:	f0 e0       	ldi	r31, 0x00	; 0
    1ce8:	80 81       	ld	r24, Z
    1cea:	28 2f       	mov	r18, r24
    1cec:	20 7f       	andi	r18, 0xF0	; 240
    1cee:	80 91 71 00 	lds	r24, 0x0071
    1cf2:	9a e0       	ldi	r25, 0x0A	; 10
    1cf4:	69 2f       	mov	r22, r25
    1cf6:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <__udivmodqi4>
    1cfa:	89 2f       	mov	r24, r25
    1cfc:	82 2b       	or	r24, r18
    1cfe:	8c 93       	st	X, r24
    1d00:	80 e0       	ldi	r24, 0x00	; 0
    1d02:	90 e0       	ldi	r25, 0x00	; 0
    1d04:	a0 e0       	ldi	r26, 0x00	; 0
    1d06:	b0 e4       	ldi	r27, 0x40	; 64
    1d08:	89 8f       	std	Y+25, r24	; 0x19
    1d0a:	9a 8f       	std	Y+26, r25	; 0x1a
    1d0c:	ab 8f       	std	Y+27, r26	; 0x1b
    1d0e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d10:	69 8d       	ldd	r22, Y+25	; 0x19
    1d12:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d14:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d16:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d18:	20 e0       	ldi	r18, 0x00	; 0
    1d1a:	30 e0       	ldi	r19, 0x00	; 0
    1d1c:	4a e7       	ldi	r20, 0x7A	; 122
    1d1e:	53 e4       	ldi	r21, 0x43	; 67
    1d20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d24:	dc 01       	movw	r26, r24
    1d26:	cb 01       	movw	r24, r22
    1d28:	8d 8b       	std	Y+21, r24	; 0x15
    1d2a:	9e 8b       	std	Y+22, r25	; 0x16
    1d2c:	af 8b       	std	Y+23, r26	; 0x17
    1d2e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1d30:	6d 89       	ldd	r22, Y+21	; 0x15
    1d32:	7e 89       	ldd	r23, Y+22	; 0x16
    1d34:	8f 89       	ldd	r24, Y+23	; 0x17
    1d36:	98 8d       	ldd	r25, Y+24	; 0x18
    1d38:	20 e0       	ldi	r18, 0x00	; 0
    1d3a:	30 e0       	ldi	r19, 0x00	; 0
    1d3c:	40 e8       	ldi	r20, 0x80	; 128
    1d3e:	5f e3       	ldi	r21, 0x3F	; 63
    1d40:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d44:	88 23       	and	r24, r24
    1d46:	2c f4       	brge	.+10     	; 0x1d52 <main+0x698>
		__ticks = 1;
    1d48:	81 e0       	ldi	r24, 0x01	; 1
    1d4a:	90 e0       	ldi	r25, 0x00	; 0
    1d4c:	9c 8b       	std	Y+20, r25	; 0x14
    1d4e:	8b 8b       	std	Y+19, r24	; 0x13
    1d50:	3f c0       	rjmp	.+126    	; 0x1dd0 <main+0x716>
	else if (__tmp > 65535)
    1d52:	6d 89       	ldd	r22, Y+21	; 0x15
    1d54:	7e 89       	ldd	r23, Y+22	; 0x16
    1d56:	8f 89       	ldd	r24, Y+23	; 0x17
    1d58:	98 8d       	ldd	r25, Y+24	; 0x18
    1d5a:	20 e0       	ldi	r18, 0x00	; 0
    1d5c:	3f ef       	ldi	r19, 0xFF	; 255
    1d5e:	4f e7       	ldi	r20, 0x7F	; 127
    1d60:	57 e4       	ldi	r21, 0x47	; 71
    1d62:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d66:	18 16       	cp	r1, r24
    1d68:	4c f5       	brge	.+82     	; 0x1dbc <main+0x702>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d6a:	69 8d       	ldd	r22, Y+25	; 0x19
    1d6c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d6e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d70:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d72:	20 e0       	ldi	r18, 0x00	; 0
    1d74:	30 e0       	ldi	r19, 0x00	; 0
    1d76:	40 e2       	ldi	r20, 0x20	; 32
    1d78:	51 e4       	ldi	r21, 0x41	; 65
    1d7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d7e:	dc 01       	movw	r26, r24
    1d80:	cb 01       	movw	r24, r22
    1d82:	bc 01       	movw	r22, r24
    1d84:	cd 01       	movw	r24, r26
    1d86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d8a:	dc 01       	movw	r26, r24
    1d8c:	cb 01       	movw	r24, r22
    1d8e:	9c 8b       	std	Y+20, r25	; 0x14
    1d90:	8b 8b       	std	Y+19, r24	; 0x13
    1d92:	0f c0       	rjmp	.+30     	; 0x1db2 <main+0x6f8>
    1d94:	89 e1       	ldi	r24, 0x19	; 25
    1d96:	90 e0       	ldi	r25, 0x00	; 0
    1d98:	9a 8b       	std	Y+18, r25	; 0x12
    1d9a:	89 8b       	std	Y+17, r24	; 0x11
    1d9c:	89 89       	ldd	r24, Y+17	; 0x11
    1d9e:	9a 89       	ldd	r25, Y+18	; 0x12
    1da0:	01 97       	sbiw	r24, 0x01	; 1
    1da2:	f1 f7       	brne	.-4      	; 0x1da0 <main+0x6e6>
    1da4:	9a 8b       	std	Y+18, r25	; 0x12
    1da6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1da8:	8b 89       	ldd	r24, Y+19	; 0x13
    1daa:	9c 89       	ldd	r25, Y+20	; 0x14
    1dac:	01 97       	sbiw	r24, 0x01	; 1
    1dae:	9c 8b       	std	Y+20, r25	; 0x14
    1db0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1db2:	8b 89       	ldd	r24, Y+19	; 0x13
    1db4:	9c 89       	ldd	r25, Y+20	; 0x14
    1db6:	00 97       	sbiw	r24, 0x00	; 0
    1db8:	69 f7       	brne	.-38     	; 0x1d94 <main+0x6da>
    1dba:	14 c0       	rjmp	.+40     	; 0x1de4 <main+0x72a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dbc:	6d 89       	ldd	r22, Y+21	; 0x15
    1dbe:	7e 89       	ldd	r23, Y+22	; 0x16
    1dc0:	8f 89       	ldd	r24, Y+23	; 0x17
    1dc2:	98 8d       	ldd	r25, Y+24	; 0x18
    1dc4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dc8:	dc 01       	movw	r26, r24
    1dca:	cb 01       	movw	r24, r22
    1dcc:	9c 8b       	std	Y+20, r25	; 0x14
    1dce:	8b 8b       	std	Y+19, r24	; 0x13
    1dd0:	8b 89       	ldd	r24, Y+19	; 0x13
    1dd2:	9c 89       	ldd	r25, Y+20	; 0x14
    1dd4:	98 8b       	std	Y+16, r25	; 0x10
    1dd6:	8f 87       	std	Y+15, r24	; 0x0f
    1dd8:	8f 85       	ldd	r24, Y+15	; 0x0f
    1dda:	98 89       	ldd	r25, Y+16	; 0x10
    1ddc:	01 97       	sbiw	r24, 0x01	; 1
    1dde:	f1 f7       	brne	.-4      	; 0x1ddc <main+0x722>
    1de0:	98 8b       	std	Y+16, r25	; 0x10
    1de2:	8f 87       	std	Y+15, r24	; 0x0f

			_delay_ms(2);

			PORTA = (PORTA & 0xC0) | 0x20;
    1de4:	ab e3       	ldi	r26, 0x3B	; 59
    1de6:	b0 e0       	ldi	r27, 0x00	; 0
    1de8:	eb e3       	ldi	r30, 0x3B	; 59
    1dea:	f0 e0       	ldi	r31, 0x00	; 0
    1dec:	80 81       	ld	r24, Z
    1dee:	80 7c       	andi	r24, 0xC0	; 192
    1df0:	80 62       	ori	r24, 0x20	; 32
    1df2:	8c 93       	st	X, r24
			PORTC = (PORTC & 0xF0) | (hours_count/10);
    1df4:	a5 e3       	ldi	r26, 0x35	; 53
    1df6:	b0 e0       	ldi	r27, 0x00	; 0
    1df8:	e5 e3       	ldi	r30, 0x35	; 53
    1dfa:	f0 e0       	ldi	r31, 0x00	; 0
    1dfc:	80 81       	ld	r24, Z
    1dfe:	28 2f       	mov	r18, r24
    1e00:	20 7f       	andi	r18, 0xF0	; 240
    1e02:	80 91 71 00 	lds	r24, 0x0071
    1e06:	9a e0       	ldi	r25, 0x0A	; 10
    1e08:	69 2f       	mov	r22, r25
    1e0a:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <__udivmodqi4>
    1e0e:	82 2b       	or	r24, r18
    1e10:	8c 93       	st	X, r24
    1e12:	80 e0       	ldi	r24, 0x00	; 0
    1e14:	90 e0       	ldi	r25, 0x00	; 0
    1e16:	a0 e0       	ldi	r26, 0x00	; 0
    1e18:	b0 e4       	ldi	r27, 0x40	; 64
    1e1a:	8b 87       	std	Y+11, r24	; 0x0b
    1e1c:	9c 87       	std	Y+12, r25	; 0x0c
    1e1e:	ad 87       	std	Y+13, r26	; 0x0d
    1e20:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e22:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e24:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e26:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e28:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e2a:	20 e0       	ldi	r18, 0x00	; 0
    1e2c:	30 e0       	ldi	r19, 0x00	; 0
    1e2e:	4a e7       	ldi	r20, 0x7A	; 122
    1e30:	53 e4       	ldi	r21, 0x43	; 67
    1e32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e36:	dc 01       	movw	r26, r24
    1e38:	cb 01       	movw	r24, r22
    1e3a:	8f 83       	std	Y+7, r24	; 0x07
    1e3c:	98 87       	std	Y+8, r25	; 0x08
    1e3e:	a9 87       	std	Y+9, r26	; 0x09
    1e40:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e42:	6f 81       	ldd	r22, Y+7	; 0x07
    1e44:	78 85       	ldd	r23, Y+8	; 0x08
    1e46:	89 85       	ldd	r24, Y+9	; 0x09
    1e48:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e4a:	20 e0       	ldi	r18, 0x00	; 0
    1e4c:	30 e0       	ldi	r19, 0x00	; 0
    1e4e:	40 e8       	ldi	r20, 0x80	; 128
    1e50:	5f e3       	ldi	r21, 0x3F	; 63
    1e52:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e56:	88 23       	and	r24, r24
    1e58:	2c f4       	brge	.+10     	; 0x1e64 <main+0x7aa>
		__ticks = 1;
    1e5a:	81 e0       	ldi	r24, 0x01	; 1
    1e5c:	90 e0       	ldi	r25, 0x00	; 0
    1e5e:	9e 83       	std	Y+6, r25	; 0x06
    1e60:	8d 83       	std	Y+5, r24	; 0x05
    1e62:	3f c0       	rjmp	.+126    	; 0x1ee2 <main+0x828>
	else if (__tmp > 65535)
    1e64:	6f 81       	ldd	r22, Y+7	; 0x07
    1e66:	78 85       	ldd	r23, Y+8	; 0x08
    1e68:	89 85       	ldd	r24, Y+9	; 0x09
    1e6a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e6c:	20 e0       	ldi	r18, 0x00	; 0
    1e6e:	3f ef       	ldi	r19, 0xFF	; 255
    1e70:	4f e7       	ldi	r20, 0x7F	; 127
    1e72:	57 e4       	ldi	r21, 0x47	; 71
    1e74:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e78:	18 16       	cp	r1, r24
    1e7a:	4c f5       	brge	.+82     	; 0x1ece <main+0x814>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e7c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e7e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e80:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e82:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e84:	20 e0       	ldi	r18, 0x00	; 0
    1e86:	30 e0       	ldi	r19, 0x00	; 0
    1e88:	40 e2       	ldi	r20, 0x20	; 32
    1e8a:	51 e4       	ldi	r21, 0x41	; 65
    1e8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e90:	dc 01       	movw	r26, r24
    1e92:	cb 01       	movw	r24, r22
    1e94:	bc 01       	movw	r22, r24
    1e96:	cd 01       	movw	r24, r26
    1e98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e9c:	dc 01       	movw	r26, r24
    1e9e:	cb 01       	movw	r24, r22
    1ea0:	9e 83       	std	Y+6, r25	; 0x06
    1ea2:	8d 83       	std	Y+5, r24	; 0x05
    1ea4:	0f c0       	rjmp	.+30     	; 0x1ec4 <main+0x80a>
    1ea6:	89 e1       	ldi	r24, 0x19	; 25
    1ea8:	90 e0       	ldi	r25, 0x00	; 0
    1eaa:	9c 83       	std	Y+4, r25	; 0x04
    1eac:	8b 83       	std	Y+3, r24	; 0x03
    1eae:	8b 81       	ldd	r24, Y+3	; 0x03
    1eb0:	9c 81       	ldd	r25, Y+4	; 0x04
    1eb2:	01 97       	sbiw	r24, 0x01	; 1
    1eb4:	f1 f7       	brne	.-4      	; 0x1eb2 <main+0x7f8>
    1eb6:	9c 83       	std	Y+4, r25	; 0x04
    1eb8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1eba:	8d 81       	ldd	r24, Y+5	; 0x05
    1ebc:	9e 81       	ldd	r25, Y+6	; 0x06
    1ebe:	01 97       	sbiw	r24, 0x01	; 1
    1ec0:	9e 83       	std	Y+6, r25	; 0x06
    1ec2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ec4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ec6:	9e 81       	ldd	r25, Y+6	; 0x06
    1ec8:	00 97       	sbiw	r24, 0x00	; 0
    1eca:	69 f7       	brne	.-38     	; 0x1ea6 <main+0x7ec>
    1ecc:	5f cc       	rjmp	.-1858   	; 0x178c <main+0xd2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ece:	6f 81       	ldd	r22, Y+7	; 0x07
    1ed0:	78 85       	ldd	r23, Y+8	; 0x08
    1ed2:	89 85       	ldd	r24, Y+9	; 0x09
    1ed4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ed6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eda:	dc 01       	movw	r26, r24
    1edc:	cb 01       	movw	r24, r22
    1ede:	9e 83       	std	Y+6, r25	; 0x06
    1ee0:	8d 83       	std	Y+5, r24	; 0x05
    1ee2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ee4:	9e 81       	ldd	r25, Y+6	; 0x06
    1ee6:	9a 83       	std	Y+2, r25	; 0x02
    1ee8:	89 83       	std	Y+1, r24	; 0x01
    1eea:	89 81       	ldd	r24, Y+1	; 0x01
    1eec:	9a 81       	ldd	r25, Y+2	; 0x02
    1eee:	01 97       	sbiw	r24, 0x01	; 1
    1ef0:	f1 f7       	brne	.-4      	; 0x1eee <main+0x834>
    1ef2:	9a 83       	std	Y+2, r25	; 0x02
    1ef4:	89 83       	std	Y+1, r24	; 0x01
    1ef6:	4a cc       	rjmp	.-1900   	; 0x178c <main+0xd2>

00001ef8 <__udivmodqi4>:
    1ef8:	99 1b       	sub	r25, r25
    1efa:	79 e0       	ldi	r23, 0x09	; 9
    1efc:	04 c0       	rjmp	.+8      	; 0x1f06 <__udivmodqi4_ep>

00001efe <__udivmodqi4_loop>:
    1efe:	99 1f       	adc	r25, r25
    1f00:	96 17       	cp	r25, r22
    1f02:	08 f0       	brcs	.+2      	; 0x1f06 <__udivmodqi4_ep>
    1f04:	96 1b       	sub	r25, r22

00001f06 <__udivmodqi4_ep>:
    1f06:	88 1f       	adc	r24, r24
    1f08:	7a 95       	dec	r23
    1f0a:	c9 f7       	brne	.-14     	; 0x1efe <__udivmodqi4_loop>
    1f0c:	80 95       	com	r24
    1f0e:	08 95       	ret

00001f10 <__prologue_saves__>:
    1f10:	2f 92       	push	r2
    1f12:	3f 92       	push	r3
    1f14:	4f 92       	push	r4
    1f16:	5f 92       	push	r5
    1f18:	6f 92       	push	r6
    1f1a:	7f 92       	push	r7
    1f1c:	8f 92       	push	r8
    1f1e:	9f 92       	push	r9
    1f20:	af 92       	push	r10
    1f22:	bf 92       	push	r11
    1f24:	cf 92       	push	r12
    1f26:	df 92       	push	r13
    1f28:	ef 92       	push	r14
    1f2a:	ff 92       	push	r15
    1f2c:	0f 93       	push	r16
    1f2e:	1f 93       	push	r17
    1f30:	cf 93       	push	r28
    1f32:	df 93       	push	r29
    1f34:	cd b7       	in	r28, 0x3d	; 61
    1f36:	de b7       	in	r29, 0x3e	; 62
    1f38:	ca 1b       	sub	r28, r26
    1f3a:	db 0b       	sbc	r29, r27
    1f3c:	0f b6       	in	r0, 0x3f	; 63
    1f3e:	f8 94       	cli
    1f40:	de bf       	out	0x3e, r29	; 62
    1f42:	0f be       	out	0x3f, r0	; 63
    1f44:	cd bf       	out	0x3d, r28	; 61
    1f46:	09 94       	ijmp

00001f48 <__epilogue_restores__>:
    1f48:	2a 88       	ldd	r2, Y+18	; 0x12
    1f4a:	39 88       	ldd	r3, Y+17	; 0x11
    1f4c:	48 88       	ldd	r4, Y+16	; 0x10
    1f4e:	5f 84       	ldd	r5, Y+15	; 0x0f
    1f50:	6e 84       	ldd	r6, Y+14	; 0x0e
    1f52:	7d 84       	ldd	r7, Y+13	; 0x0d
    1f54:	8c 84       	ldd	r8, Y+12	; 0x0c
    1f56:	9b 84       	ldd	r9, Y+11	; 0x0b
    1f58:	aa 84       	ldd	r10, Y+10	; 0x0a
    1f5a:	b9 84       	ldd	r11, Y+9	; 0x09
    1f5c:	c8 84       	ldd	r12, Y+8	; 0x08
    1f5e:	df 80       	ldd	r13, Y+7	; 0x07
    1f60:	ee 80       	ldd	r14, Y+6	; 0x06
    1f62:	fd 80       	ldd	r15, Y+5	; 0x05
    1f64:	0c 81       	ldd	r16, Y+4	; 0x04
    1f66:	1b 81       	ldd	r17, Y+3	; 0x03
    1f68:	aa 81       	ldd	r26, Y+2	; 0x02
    1f6a:	b9 81       	ldd	r27, Y+1	; 0x01
    1f6c:	ce 0f       	add	r28, r30
    1f6e:	d1 1d       	adc	r29, r1
    1f70:	0f b6       	in	r0, 0x3f	; 63
    1f72:	f8 94       	cli
    1f74:	de bf       	out	0x3e, r29	; 62
    1f76:	0f be       	out	0x3f, r0	; 63
    1f78:	cd bf       	out	0x3d, r28	; 61
    1f7a:	ed 01       	movw	r28, r26
    1f7c:	08 95       	ret

00001f7e <_exit>:
    1f7e:	f8 94       	cli

00001f80 <__stop_program>:
    1f80:	ff cf       	rjmp	.-2      	; 0x1f80 <__stop_program>
